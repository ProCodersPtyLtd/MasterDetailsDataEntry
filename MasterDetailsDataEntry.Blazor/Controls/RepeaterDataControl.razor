@inject IComponentTypeResolver _componentResolverService
@inject IDataValidationProvider _dataValidationProvider

<div class="RepeaterDataControl">
    <table mat-table>
        <tr class="jsgrid-grid-header">
            @foreach (var field in Fields)
            {
                @if (field.Hidden)
                {
                    continue;
                }

                @if (field.Required)
                {
                    <th>@(field.Label)*</th>
                }
                else
                {
                    <th>@field.Label</th>
                }
            }

            <th></th>
        </tr>

        @{
            @*@foreach (var item in ModelItems)*@
            @for (int rowIndex = 0; rowIndex < ModelItems.Count; rowIndex++)
            {
                var row = rowIndex;

                <tr class="jsgrid-row-item">
                    @foreach (var field in Fields)
                    {
                        @if (field.Hidden)
                        {
                            continue;
                        }

                        <td >
                            <SingleDataControl Form="@Form" Field="@field" ExtraHeight="@GetExtraHeight(rowIndex)" State="@CreateFieldState(field, rowIndex)"
                                               IsEditing="@(GetRowState(rowIndex).IsEditing)" ModelValueChanged="@LocalModelValueChanged" />
                        </td>
                    }

                    <td>
                            <button class="btn btn-light" title="Edit" @onclick="@((args) => EditClick(args, row))" 
                                    hidden="@(GetRowState(rowIndex).IsEditing || (ViewOptions?.AllowEdit == false))" disabled="@_isEditing">
                                <span class="oi oi-pencil"></span>
                            </button>

                            <button class="btn btn-light" titel="Delete" @onclick="@((args) => DeleteClick(args, row))" 
                                    hidden="@(GetRowState(rowIndex).IsEditing || (ViewOptions?.AllowDelete == false))" disabled="@_isEditing">
                                <span class="oi oi-delete"></span>&nbsp;
                            </button>

                        <div style="vertical-align: top; width: 167px; height:@(GetExtraHeight(rowIndex) ? 61: 41)px;" hidden="@(!GetRowState(rowIndex).IsEditing)">
                            <button class="btn btn-light" title="Apply" @onclick="@((args) => ApplyClick(args, row))" hidden="@(!GetRowState(rowIndex).IsEditing)">
                                <span class="oi oi-check"></span>
                            </button>

                            <button class="btn btn-light" title="Cancel" @onclick="@((args) => CancelClick(args, row))" hidden="@(!GetRowState(rowIndex).IsEditing)">
                                <span class="oi oi-action-undo"></span>
                            </button>
                        </div>
                    </td>
                </tr>
            }
        }

    </table>
    <div hidden="@(!ViewOptions?.AllowAdd == true)">
        <button class="btn btn-primary" @onclick="@((args) => AddClick(args))" disabled="@_isEditing">Add</button>
    </div>

    <textarea hidden="@(_error == null ? "hidden" : null)" readonly="readonly" class="form-control" style="background-color: black; color: red;" rows="3">Error: @_error</textarea>
</div>

@code
{
    [Parameter]
    public IModelDefinitionForm Form { get; set; }

    [Parameter]
    public FormViewOptions ViewOptions { get; set; } = new FormViewOptions { AllowAdd = true, AllowDelete = true, AllowEdit = true };

    [Parameter]
    public Type ModelType { get; set; }

    [Parameter]
    public IEnumerable<DataField> Fields { get; set; }

    [Parameter]
    public System.Collections.IList ModelItems { get; set; }

    [Parameter]
    public EventCallback<ValueChangedArgs> ModelValueChanged { get; set; }

    [Parameter]
    public EventCallback<ItemsChangedArgs> ItemsChanged { get; set; }

    private object _modelItemReserveCopy;
    private bool _isEditing;
    private string _error;
    private int _modelItemsHash;
    private IEnumerable<ValidationResult> _validations = new ValidationResult[0];

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _isEditing = false;
        _modelItemReserveCopy = null;
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        // check if items refreshed
        if (_modelItemsHash != ModelItems.GetHashCode())
        {
            _isEditing = false;
            _modelItemReserveCopy = null;
            _modelItemsHash = ModelItems.GetHashCode();
        }
    }

    private async Task LocalModelValueChanged(ValueChangedArgs args)
    {
        SetItemValue(args.Field, args.State);

        if (args.State.ValidationMessages.Any())
        {
            var validations = _dataValidationProvider.ValidateModelProperty(ModelItems[args.State.RowIndex], args.State.RowIndex, args.Field.BindingProperty, Fields);
            UpdateFieldStateValidations(validations, args.State.RowIndex, args.Field.BindingProperty);
        }

        await ModelValueChanged.InvokeAsync(args);
    }

    private bool GetExtraHeight(int rowIndex)
    {
        return _validations.Any() && GetRowState(rowIndex).IsEditing;
    }

    private EditModes GetEditMode()
    {
        return EditModes.SingleRecord;
    }

    private Dictionary<string, FieldState> _states = new Dictionary<string, FieldState>();

    private string GetFieldStateKey(string bindingProperty, int row)
    {
        string fieldStateKey = $"{bindingProperty}[{row}]";
        return fieldStateKey;
    }

    private FieldState CreateFieldState(DataField field, int row)
    {
        string fieldStateKey = GetFieldStateKey(field.BindingProperty, row);

        if (!_states.ContainsKey(fieldStateKey))
        {
            _states[fieldStateKey] = new FieldState(field, row);
        }

        var result = _states[fieldStateKey];
        result.Value = GetItemValue(field, row);
        result.RowIndex = row;
        return result;
    }

    private RowState GetRowState(int rowIndex)
    {
        return ModelItems[rowIndex].GetBag<RowState>();
    }

    #region reflection get set property
    private object GetItemValue(DataField field, int row)
    {
        var item = ModelItems[row];
        var result = item.GetPropertyValue(field.BindingProperty);
        return result;
    }

    private void SetItemValue(DataField field, FieldState state)
    {
        var item = ModelItems[state.RowIndex];
        item.SetPropertyValue(field.BindingProperty, state.Value);
    }
    #endregion

    #region clicks
    private void EditClick(MouseEventArgs e, int rowIndex)
    {
        _isEditing = true;
        ModelItems[rowIndex].GetBag<RowState>().IsEditing = true;
        _modelItemReserveCopy = ModelItems[rowIndex].GetCopy();
        StateHasChanged();
    }

    private void DeleteClick(MouseEventArgs e, int rowIndex)
    {
        var args = new ItemsChangedArgs { Operation = ItemOperations.Delete, RowIndex = rowIndex };
        ItemsChanged.InvokeAsync(args);
    }

    private async Task ApplyClick(MouseEventArgs e, int rowIndex)
    {
        _validations = _dataValidationProvider.ValidateModel(ModelItems[rowIndex], rowIndex, Fields);
        UpdateFieldStateValidations(_validations, rowIndex);

        if (_validations.Any())
        {
            return;
        }

        _error = null;
        var args = new ItemsChangedArgs { RowIndex = rowIndex };
        args.Operation = ModelItems[rowIndex].GetBag<RowState>().IsNew ? ItemOperations.Add : ItemOperations.Update;

        try
        {
            await ItemsChanged.InvokeAsync(args);
        }
        catch(Exception exc)
        {
            _error = exc.Message;

            if (exc.InnerException != null)
            {
                _error += "\r\n";
                _error += exc.InnerException.Message;
            }

            StateHasChanged();
        }

        if (_error == null)
        {
            ModelItems[rowIndex].GetBag<RowState>().IsEditing = false;
            ModelItems[rowIndex].GetBag<RowState>().IsNew = false;
            _isEditing = false;
        }
    }

    private void CancelClick(MouseEventArgs e, int rowIndex)
    {
        _error = null;
        ClearValidations();

        //if (!ModelItems[rowIndex].GetBag<RowState>().IsNew)
        //{
        //    _modelItemReserveCopy.CopyTo(ModelItems[rowIndex]);
        //}

        ModelItems[rowIndex].GetBag<RowState>().IsEditing = false;
        _isEditing = false;

        if (ModelItems[rowIndex].GetBag<RowState>().IsNew)
        {
            ModelItems.RemoveAt(rowIndex);
        }
        else
        {
            _modelItemReserveCopy.CopyTo(ModelItems[rowIndex]);
        }
    }

    private void AddClick(MouseEventArgs e)
    {
        var item = Activator.CreateInstance(ModelType);
        ModelItems.Add(item);
        EditClick(null, ModelItems.Count-1);
        ModelItems[ModelItems.Count - 1].GetBag<RowState>().IsNew = true;
    }
    #endregion

    private void ClearValidations()
    {
        foreach (var state in _states.Values)
        {
            state.ValidationMessages = new List<string>();
        }
    }

    private void UpdateFieldStateValidations(IEnumerable<ValidationResult> validations, int rowIndex, string bindindProperty = null)
    {
        if (bindindProperty == null)
        {
            ClearValidations();
        }
        else
        {
            var key = GetFieldStateKey(bindindProperty, rowIndex);
            _states[key].ValidationMessages = new List<string>();
        }

        foreach (var validation in validations)
        {
            if (bindindProperty == null || validation.BindingProperty == bindindProperty)
            {
                if (validation.ValidationResultType == ValidationResultTypes.Error)
                {
                    var key = GetFieldStateKey(validation.BindingProperty, validation.RowIndex);
                    _states[key].ValidationMessages.Add(validation.Message);
                }
            }
        }
    }

}