@inject IComponentTypeResolver _componentResolverService

<div class="SingleDataControl" style="vertical-align: top; width: @(GetWidth())px; height: @(ExtraHeight ? 61: 41)px;">
    @{

        var component = IsEditing
            ? _componentResolverService.GetComponentTypeByName(Field.ControlType?.FullName)
            : _componentResolverService.GetComponentTypeByName(Field.ViewModeControlType?.FullName);

        RenderFragment renderFragment = (builder) =>
        {
            builder.OpenComponent(0, component);

            if (component.DefinesComponentParameter("Form", typeof(ParameterAttribute)))
            {
                builder.AddAttribute(0, "Form", Form);
            }

            if (component.DefinesComponentParameter("IsEditing", typeof(ParameterAttribute)))
            {
                builder.AddAttribute(0, "IsEditing", ExtraHeight);
            }

            builder.AddAttribute(0, "Field", Field);
            builder.AddAttribute(0, "State", State);
            builder.AddAttribute(0, "ModelValueChanged", ModelValueChanged);
            builder.CloseComponent();
        };
        <div>
            @renderFragment
        </div>
    }

</div>

@code
{
    [Parameter]
    public IModelDefinitionForm Form { get; set; }

    [Parameter]
    public DataField Field { get; set; }

    [Parameter]
    public FieldState State { get; set; }

    [Parameter]
    public bool ExtraHeight { get; set; }

    [Parameter]
    public bool IsEditing { get; set; }

    [Parameter]
    public EventCallback<ValueChangedArgs> ModelValueChanged { get; set; }

    private int GetWidth()
    {
        var component = IsEditing
            ? _componentResolverService.GetComponentTypeByName(Field.ControlType?.FullName)
            : _componentResolverService.GetComponentTypeByName(Field.ViewModeControlType?.FullName);

        if (component == typeof(Checkbox) || component == typeof(CheckboxReadonly))
        {
            return 60;
        }
        else
        {
            return 167;
        }
    }
}