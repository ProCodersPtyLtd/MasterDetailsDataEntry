@namespace Platz.ObjectBuilder.Blazor

    <div class="float-right">
            <button class="btn btn-danger btn-sm" title="Cancel" @onclick="@(async (args) => await DeleteClick(args, @Table.StoreDefinition.Name, @Table.Alias))"
                style="display: block; margin-left: auto; margin-right: 0;">
            <span class="oi oi-x"></span>
        </button>
    </div>

    <table>
        <tr>
            <th></th>
            <th>@Table.StoreDefinition.Name</th>
            <th><input value="@Table.Alias" style="width: 48px;" @onchange="@(async (args) => await TableAliasChanged(args))" /></th>
        </tr>
    </table>

    <table @onmouseover="@(e => { _shortTableView = false; })" @onmouseout="@(e => { _shortTableView = true; })">
        @*<tr hidden="@_shortTableView">*@
        <tr>
            <th>pk</th>
            <th><input type="checkbox" checked="@GetSelectAllValue()" @onchange="@(async (args) => await SelectAllClick(args))" /></th>
            <th>select all</th>
            @*<th>FK</th>*@
            <th></th>
        </tr>
        @for (int rowIndex = 0; rowIndex < Table.Properties.Count; rowIndex++)
        {
            var item = Table.Properties[rowIndex];
            var row = rowIndex;

            <tr>
                <td>
                    @if (item.StoreProperty.Pk)
                    {
                        <span id="@GetPkId(row)" class="oi oi-key"></span>
                    }
                </td>
                <td><input type="checkbox" checked="@GetSelectedValue(row)" @onchange="@(async (args) => await SelectClick(args, row))" /></td>
                <td>@item.StoreProperty.Name</td>
                <td>
                    @if (item.StoreProperty.Fk)
                    {
                        <span id="@GetFkId(row)" class="oi oi-infinity"></span>
                    }
                </td>
            </tr>
        }
    </table>

    @code {
        [CascadingParameter]
        public IQueryController QueryController { get; set; }

        [Parameter]
        public QueryFromTable Table { get; set; }

        [Parameter]
        public EventCallback<ChangeEventArgs> ModelChanged { get; set; }

        //public ElementReference PkRef;

        private bool _shortTableView = true;
        private bool _selectAllValue;

        public string GetPkId(int i)
        {
            var id = QueryController.GenerateObjectId("table_primary", Table.Id, i);
            return id;
        }

        public string GetFkId(int i)
        {
            var id = QueryController.GenerateObjectId("table_foreign", Table.Id, i);
            return id;
        }

        protected override async Task OnInitializedAsync()
        {
            base.OnInitialized();
            _selectAllValue = true;
            SelectAll();
            await ModelChanged.InvokeAsync(null);
        }

        private void SelectAll()
        {
            for (int i = 0; i < Table.Properties.Count; i++)
            {
                var item = Table.Properties[i];
                item.Selected = _selectAllValue;
                AddRemoveSelection(_selectAllValue, i);
            }
        }

        private string GetSelectAllValue()
        {
            var result = _selectAllValue == true ? "checked" : null;
            return result;
        }

        private string GetSelectedValue(int rowIndex)
        {
            var result = Table.Properties[rowIndex].Selected == true ? "checked" : null;
            return result;
        }

        private async Task DeleteClick(MouseEventArgs e, string tableName, string alias)
        {
            _selectAllValue = false;
            SelectAll();
            QueryController.RemoveFromTable(tableName, alias);
            await ModelChanged.InvokeAsync(null);
        }

        private async Task SelectAllClick(ChangeEventArgs e)
        {
            _selectAllValue = !_selectAllValue;

            for (int i = 0; i < Table.Properties.Count; i++)
            {
                var item = Table.Properties[i];

                if (item.Selected != _selectAllValue)
                {
                    item.Selected = _selectAllValue;
                    AddRemoveSelection(_selectAllValue, i);
                }
            }

            await ModelChanged.InvokeAsync(null);
        }

        private async Task SelectClick(ChangeEventArgs e, int rowIndex)
        {
            var selected = (bool)e.Value;
            Table.Properties[rowIndex].Selected = selected;
            AddRemoveSelection(selected, rowIndex);

            await ModelChanged.InvokeAsync(null);
        }

        private async Task TableAliasChanged(ChangeEventArgs e)
        {
            Table.Alias = (string)e.Value;
            await ModelChanged.InvokeAsync(null);
        }

        private void AddRemoveSelection(bool selected, int rowIndex)
        {
            if (selected)
            {
                QueryController.AddSelectionProperty(Table, Table.Properties[rowIndex]);
            }
            else
            {
                QueryController.RemoveSelectionProperty(Table, Table.Properties[rowIndex]);
            }
        }
    }
