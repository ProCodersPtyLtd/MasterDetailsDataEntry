@using Platz.ObjectBuilder.Blazor.Controllers
@using System.Text.Json

@inject IJSRuntime JS

@namespace Platz.ObjectBuilder.Blazor

<div style="width: 100%">
    <p>
        <div class="float">
            <button class="btn btn-light" type="button" data-toggle="collapse" data-target="#collapseExample" aria-expanded="false" aria-controls="collapseExample"
                    @onclick="@(() => SettingsClick())">
                <span class="oi oi-ellipses"></span>
            </button>
            <b>Settings: </b>
            &nbsp;
            <label>Path</label>
            <input readonly="readonly" @bind="StoreDataPath" style="width: 600px" />
        </div>
    </p>
    <div class="collapse" id="collapseExample">
        <div class="card card-body">
            <table cellpadding="10">
                <tr>
                    <td style="vertical-align: top;">
                        <label>Data Service name</label>
                        <input @bind="QueryController.StoreParameters.DataService" />

                        <label>Namespace</label>
                        <input @bind="QueryController.StoreParameters.Namespace" />

                        <label>Query Return Type name</label>
                        <input value="@QueryController.StoreParameters.QueryReturnType" @onchange="QueryReturnTypeCahnged" />

                        <label>Query name</label>
                        <input @bind="QueryController.StoreParameters.QueryName" />
                    </td>
                    <td style="width: 300px; vertical-align: top;">
                        <label>Parameters</label>

                        @if (_query?.Query?.Parameters != null)
                        {
                            <table cellpadding="3">
                                @foreach (var p in _query.Query.Parameters.Values)
                                {
                                    <tr>
                                        <td>@p.Name</td>
                                        <td>@p.Type</td>
                                    </tr>
                                }
                            </table>
                        }
                    </td>
                    <td style="width: 100%; vertical-align: top;">
                        <div class="plk-flex">
                            <label>Log</label>
                            <textarea id="exampleFormControlTextarea1" rows="8" style="width: 100%" @bind="@QueryController.Errors" />
                        </div>

                    </td>
                </tr>
            </table>


            <div class="float-right">
                <button class="btn btn-light btn-sm" title="Add" @onclick="@(() => SettingsRightClick())">
                    <span class="oi oi-fire"></span>
                </button>
            </div>

            <hr />

            <div class="float">
                <button class="btn btn-primary" type="button" @onclick="SaveClick" style="width: 120px">Save</button>
                &nbsp;
                <button class="btn btn-secondary" type="button" @onclick="ValidateClick" style="width: 120px">Validate</button>
                &nbsp;
                <button class="btn btn-secondary" type="button" @onclick="LoadClick" data-toggle="modal" data-target="#loadModal" style="width: 120px">Load...</button>
            </div>
        </div>
    </div>

</div>

<div class="modal fade" id="loadModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Load query</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="form-group">
                        <label for="recipient-name" class="col-form-label">Path:</label>
                        <input readonly="readonly" @bind="StoreDataPath" style="width: 100%" />
                    </div>
                    <div class="form-group">
                        <label for="message-text" class="col-form-label">Files:</label>
                        @{
                            var data = GetLoadFiles();
                        }

                        <div class="list-group overflow-auto" id="list-tab" role="tablist" style="max-height: 400px;">
                            @for (int i = 0; i < data.Count; i++)
                            {
                                var rowIndex = i;

                                <a class="list-group-item list-group-item-action" @onclick="() => FileClick(rowIndex)" @ondblclick="async(a) => await FileDblClick(a, rowIndex)"
                                   data-toggle="list" href="#list-home" role="tab" aria-controls="home">@data[i]</a>
                            }
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" data-dismiss="modal" @onclick="LoadFile">Load</button>
            </div>
        </div>
    </div>
</div>



@code {
    [CascadingParameter]
    public IQueryController QueryController { get; set; }

    [Parameter]
    public string StoreDataPath { get; set; }

    [Parameter]
    public string Namespace { get; set; }

    [Parameter]
    public string DataService { get; set; }

    [Parameter]
    public EventCallback<ChangeEventArgs> ModelChanged { get; set; }

    private StoreQuery _query;
    private string _selectedFileName;
    private List<string> _files;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        QueryController.StoreParameters.Namespace = Namespace;
        QueryController.StoreParameters.DataService = DataService;
        QueryController.StoreParameters.StoreDataPath = StoreDataPath;
    }

    private async Task LoadFile(MouseEventArgs args)
    {
        QueryController.LoadFromFile(StoreDataPath, _selectedFileName);
        await ModelChanged.InvokeAsync(null);
    }

    private async Task FileDblClick(MouseEventArgs args, int row)
    {
        _selectedFileName = _files[row];
        await JS.InvokeAsync<object>("HideModal", new object[] { "#loadModal" });
        await LoadFile(args);
    }

    private void FileClick(int row)
    {
        _selectedFileName = _files[row];
    }

    private List<string> GetLoadFiles()
    {
        //return new List<string>(new string[] { "GetCustList", "GetAddressList", "GetProductList" });
        //var result = new List<string>();

        //for(int i = 0; i < 100; i++)
        //{
        //    result.Add($"GetCustList{i}");
        //}

        var result = QueryController.GetFileList(StoreDataPath);
        _files = result;
        return result;
    }

    private void LoadClick(MouseEventArgs args)
    { }

    private void SaveClick(MouseEventArgs args)
    {
        QueryController.SaveSchema(StoreDataPath);
        QueryController.SaveQuery(StoreDataPath);
    }

    private void ValidateClick(MouseEventArgs args)
    {
        QueryController.Validate();
        ShowErrors();
        StateHasChanged();
    }

    private void ShowErrors()
    {
        if (QueryController.ValidationResults.Any())
        {
            foreach (var r in QueryController.ValidationResults)
            {
                QueryController.Errors += "\r\n" + r.Message;
            }
        }
        else
        {
            QueryController.Errors += "\r\n" + "Validation result: pass";
        }
    }

    private void QueryReturnTypeCahnged(ChangeEventArgs args)
    {
        QueryController.StoreParameters.QueryReturnType = (string)args.Value;
        QueryController.StoreParameters.QueryName = $"Get{QueryController.StoreParameters.QueryReturnType}List";
    }

    private void SettingsClick()
    {
        _query = QueryController.GenerateQuery();
        ShowErrors();
        StateHasChanged();
    }

    private void SettingsRightClick()
    {
        _query = QueryController.GenerateQuery();

        if (_query != null)
        {
            var options = new JsonSerializerOptions()
            {
                WriteIndented = true
            };

            var json = System.Text.Json.JsonSerializer.Serialize(_query, options);
            QueryController.Errors = json;
        }

        ShowErrors();
        StateHasChanged();
    }
}
