@using Platz.SqlForms
@using Platz.ObjectBuilder.Blazor.Controllers
@using System.Text.Json
@using System.IO

@inject IJSRuntime JS

@implements IAsyncDisposable

@namespace Platz.ObjectBuilder.Blazor

<div style="width: 100%">
    <p>
        <div class="float">
            <button class="btn btn-light" type="button" data-toggle="collapse" data-target="#collapseExample" aria-expanded="false" aria-controls="collapseExample"
                    @onclick="@(() => SettingsClick())">
                <span class="oi oi-ellipses"></span>
            </button>
            <b>Settings: </b>
            &nbsp;
            <label>Path</label>
            <input readonly="readonly" @bind="StoreDataPath" style="width: 600px" />
        </div>
    </p>
    <div class="collapse" id="collapseExample">
        <div class="card card-body">



            <table cellpadding="10">
                <tr>
                    <td style="vertical-align: top;">
                        <label>Data Service name</label>
                        <input @bind="QueryController.StoreParameters.DataService" readonly="readonly" />

                        <label>Namespace</label>
                        <input @bind="QueryController.StoreParameters.Namespace" readonly="readonly" />

                        <label>Query Return Type name</label>
                        <input value="@QueryController.StoreParameters.QueryReturnType" @onchange="QueryReturnTypeChanged" />

                        <label>Query name</label>
                        <input @bind="QueryController.StoreParameters.QueryName" />
                    </td>
                    <td style="width: 300px; vertical-align: top;">
                        <label>Parameters</label>

                        @if (_query?.Query?.Parameters != null)
                        {
                            <table cellpadding="3">
                                @foreach (var p in _query.Query.Parameters.Values)
                                {
                                    <tr>
                                        <td>@p.Name</td>
                                        <td>@p.Type</td>
                                    </tr>
                                }
                            </table>
                        }
                    </td>
                    <td style="width: 100%; vertical-align: top;">
                        <div class="plk-flex">
                            @*<label>Log</label>
                            <textarea id="exampleFormControlTextarea1" rows="8" style="width: 100%" @bind="@QueryController.Errors" />*@

                            <div style="vertical-align: top">

                                <ul class="nav nav-tabs" role="tablist">
                                    <li class="nav-item">
                                        <a class="nav-link active" data-toggle="tab" href="#Log">Log</a>
                                    </li>
                                    <li class="nav-item">
                                        <a class="nav-link" data-toggle="tab" href="#Linq">Linq</a>
                                    </li>
                                    <li class="nav-item">
                                        <a class="nav-link" data-toggle="tab" href="#Sql">Sql</a>
                                    </li>
                                </ul>


                                @*<ul class="nav nav-tabs">
                                        <li class="active"><a data-toggle="tab" href="#tables">Entities</a></li>
                                        <li><a data-toggle="tab" href="#joins">Relationships</a></li>
                                    </ul>*@

                            <div class="tab-content">
                                <div id="Log" class="tab-pane active">
                                    <textarea id="exampleFormControlTextarea1" rows="8" style="width: 100%" @bind="@QueryController.Errors" />
                                </div>
                                <div id="Linq" class="tab-pane fade">
                                    <textarea id="exampleFormControlTextarea2" readonly rows="8" style="width: 100%" @bind="@QueryController.LinqQuery" />
                                </div>
                                <div id="Sql" class="tab-pane fade">
                                    <textarea id="exampleFormControlTextarea3" readonly rows="8" style="width: 100%" @bind="@QueryController.SqlQuery" />
                                </div>
                            </div>


                            </div>











                        </div>

                    </td>
                </tr>
            </table>

            <table>
                <tr>
                    <th style="width: 340px;">
                    </th>
                    <th style="width: 120px;">
                    </th>
                    <th style="width: 170px;">
                    </th>
                </tr>

                <tr>
                    <td colspan="3">
                        <br />
                        <label>Schema Path</label><br />
                        <input value="@QueryController.StoreParameters.SchemaFileName" readonly="readonly" class="form-control" />
                    </td>
                </tr>
            </table>

            <div class="float-right">
                <button class="btn btn-light btn-sm" title="Add" @onclick="@(() => SettingsRightClick())">
                    <span class="oi oi-fire"></span>
                </button>
            </div>

            <hr />

            <div class="float">
                <button class="btn btn-primary" type="button" @onclick="SaveClick" style="width: 120px">Save</button>
                &nbsp;
                <button class="btn btn-secondary" type="button" @onclick="ValidateClick" style="width: 120px">Validate</button>
                &nbsp;
                <button class="btn btn-secondary" type="button" @onclick="LoadClick" data-toggle="modal" data-target="#loadModal" style="width: 120px">Load...</button>
            </div>
        </div>
    </div>

</div>

<div class="modal fade" id="loadModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Load query</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="form-group">
                        <label for="recipient-name" class="col-form-label">Path:</label>
                        <input readonly="readonly" @bind="StoreDataPath" style="width: 100%" />
                    </div>
                    <div class="form-group">
                        <label for="message-text" class="col-form-label">Files:</label>
                        @{
                            var data = GetLoadFiles();
                        }

                        <div class="list-group overflow-auto" id="list-tab" role="tablist" style="max-height: 400px;">
                            @for (int i = 0; i < data.Count; i++)
                            {
                                var rowIndex = i;

                            <a class="list-group-item list-group-item-action" @onclick="() => FileClick(rowIndex)" @ondblclick="async(a) => await FileDblClick(a, rowIndex)"
                               data-toggle="list" href="#list-home" role="tab" aria-controls="home">@data[i]</a>
                            }
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" data-dismiss="modal" @onclick="LoadFile">Load</button>
            </div>
        </div>
    </div>
</div>

<!-- Position it -->
<div style="position: absolute; top: 0; right: 0; min-width: 300px;z-index: 100">

    <!-- Then put toasts within -->
    <div id="saveToast" class="toast" role="banner" aria-live="assertive" aria-atomic="true" data-autohide="true" data-delay="3000" style="background-color: lightgreen;">
        <div class="toast-header">
            @*<img src="file" class="rounded mr-2" alt="...">*@
            @*<span class="oi oi-file"></span>*@
            <strong class="mr-auto">Information</strong>
            <small class="text-muted">just now</small>
            <button type="button" class="ml-2 mb-1 close" data-dismiss="toast" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
        <div class="toast-body">
            File  '@(_fileNameSaved)' saved successfully.
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    public IQueryController QueryController { get; set; }

    [Parameter]
    public string StoreDataPath { get; set; }

    [Parameter]
    public string Namespace { get; set; }

    [Parameter]
    public string DataService { get; set; }

    [Parameter]
    public EventCallback<ChangeEventArgs> ModelChanged { get; set; }

    private StoreQuery _query;
    private string _selectedFileName;
    private List<string> _files;
    private bool _fileNameChanged;
    private string _fileNameSaved;

    private Task<IJSObjectReference> _module;
    private Task<IJSObjectReference> Module => _module ??= JS.InvokeAsync<IJSObjectReference>("import", "./_content/Platz.ObjectBuilder.Blazor/objectBuilder.js").AsTask();

    public async ValueTask DisposeAsync()
    {
        if (_module != null)
        {
            var module = await _module;
            await module.DisposeAsync();
        }
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        QueryController.StoreParameters.Namespace = Namespace;
        QueryController.StoreParameters.DataService = DataService;
        QueryController.StoreParameters.StoreDataPath = StoreDataPath;
    }

    private async Task CollapseSettings()
    {
        var module = await Module;
        await module.InvokeVoidAsync("Collapse", "#collapseExample");
    }

    private async Task LoadFile(MouseEventArgs args)
    {
        if (!string.IsNullOrWhiteSpace(_selectedFileName))
        {
            QueryController.LoadFromFile(StoreDataPath, _selectedFileName);
            await ModelChanged.InvokeAsync(null);
            _fileNameChanged = false;
            await CollapseSettings();
        }
    }

    private async Task FileDblClick(MouseEventArgs args, int row)
    {
        var module = await Module;

        _selectedFileName = _files[row];
        await module.InvokeVoidAsync("HideModal", new object[] { "#loadModal" });
        await LoadFile(args);
    }

    private void FileClick(int row)
    {
        _selectedFileName = _files[row];
    }

    private List<string> GetLoadFiles()
    {
        var result = QueryController.GetFileList(StoreDataPath);
        _files = result;
        return result;
    }

    private void LoadClick(MouseEventArgs args)
    { }

    private async Task SaveClick(MouseEventArgs args)
    {
        ValidateClick(null);

        if (QueryController.ValidationResults.Any())
        {
            return;
        }

        var module = await Module;
        bool canSave = true;
        var fileName = QueryController.GenerateFileName(StoreDataPath);
        fileName = Path.GetFileName(fileName);

        if (_fileNameChanged && QueryController.FileExists(StoreDataPath))
        {
            canSave = await JS.InvokeAsync<bool>("confirm", $"File '{fileName}' already exists. Are you sure you want to overwrite it?");
        }

        if (canSave)
        {
            QueryController.SaveSchema(StoreDataPath);
            QueryController.SaveQuery(StoreDataPath);
            _fileNameSaved = fileName;
            _fileNameChanged = false;
            await module.InvokeVoidAsync("ShowToast", new object[] { "#saveToast" });
            await CollapseSettings();
        }
    }

    private void ValidateClick(MouseEventArgs args)
    {
        QueryController.Validate();
        ShowErrors();
        StateHasChanged();
    }

    private void ShowErrors()
    {
        if (QueryController.ValidationResults.Any())
        {
            foreach (var r in QueryController.ValidationResults)
            {
                QueryController.Errors += "\r\n" + r.Message;
            }
        }
        else
        {
            QueryController.Errors += "\r\n" + "Validation result: pass";
        }
    }

    private void QueryReturnTypeChanged(ChangeEventArgs args)
    {
        QueryController.StoreParameters.QueryReturnType = (string)args.Value;
        QueryController.StoreParameters.QueryName = $"Get{QueryController.StoreParameters.QueryReturnType}List";
        //var schemaFile = $"{QueryController.StoreParameters.QueryName}.schema.json";
        //QueryController.StoreParameters.ShemaFileName = schemaFile;
        //schemaFile = Path.Combine(QueryController.StoreParameters.StoreDataPath, schemaFile);
        _fileNameChanged = true;
    }

    private void SettingsClick()
    {
        _query = QueryController.GenerateQuery();
        ShowErrors();
        StateHasChanged();
    }

    private void SettingsRightClick()
    {
        _query = QueryController.GenerateQuery();

        if (_query != null)
        {
            var options = new JsonSerializerOptions()
            {
                WriteIndented = true
            };

            var json = System.Text.Json.JsonSerializer.Serialize(_query, options);
            QueryController.Errors = json;
        }

        ShowErrors();
        StateHasChanged();
    }
}
