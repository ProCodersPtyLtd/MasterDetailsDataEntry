@using Platz.ObjectBuilder.Blazor
@using Platz.ObjectBuilder.Blazor.Controllers
@using Platz.ObjectBuilder.Blazor.Model

@namespace Platz.ObjectBuilder.Blazor.Forms

@if (Field != null)
{
<div @onclick="CaptionClick" @onclick:stopPropagation="true">
    <div class="forms-widget @GetCaptionClass()">
        &nbsp;
        @($"{Field.Order}: {Field.Name} {GetControlName()}({Field.Binding})")

        <div class="float-right">
            <button class="btn btn-danger btn-sm" title="Cancel" @onclick="@(async (args) => await DeleteClick(args, Field.Binding))"
                    style="display: block; margin-left: auto; margin-right: 0;">
                <span class="oi oi-x"></span>
            </button>
        </div>
    </div>

    <div class="forms-widget-body">
        
        @if (Field.ComponentType == FieldComponentType.TextEdit)
        { 
            <FormsPageTextEditComponent Field="@Field" ModelChanged="@ModelChanged" />
        }

    </div>
</div>
}


@code {
    [CascadingParameter]
    public IFormBuilderController FormsPageController { get; set; }

    [Parameter]
    public FieldComponentModel Field { get; set; }

    [Parameter]
    public EventCallback<ChangeEventArgs> ModelChanged { get; set; }

    private string GetCaptionClass()
    {
        return Field.Active ? "forms-cap-active" : "forms-cap";
    }

    private async Task DeleteClick(MouseEventArgs e, string binding)
    { }

    private async Task CaptionClick(MouseEventArgs e)
    {
        FormsPageController.SetActive(Field);
        await ModelChanged.InvokeAsync();
    }

    private string GetControlName()
    {
        return Field.ComponentType.ToString();

        switch (Field.ComponentType)
        {
            case FieldComponentType.Dropdown:
                return "Dropdown";
            case FieldComponentType.DateEdit:
                return "Date Edit";

            case FieldComponentType.TextEdit:
            default:
                return "Text Edit";
        }
    }
}
