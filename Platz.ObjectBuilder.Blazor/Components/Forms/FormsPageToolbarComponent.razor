@namespace Platz.ObjectBuilder.Blazor.Forms

    <div class="forms-uncap">Controls</div>

    <div class="forms-toolbar forms-grid">

        @if (!FormController.Model.IsListForm)
        {
            <div class="forms-tb-buttons">
                <div>
                    <button class="btn btn-secondary tb-wide" type="button" @onclick="TextEditClick">TextEdit</button>
                </div>
                <div>
                    <button class="btn btn-secondary tb-wide" type="button" @onclick="DropdownClick">Dropdown</button>
                </div>
                <div>
                    <button class="btn btn-secondary tb-wide" type="button" @onclick="CheckboxClick">Checkbox</button>
                </div>
                <div>
                    <button class="btn btn-secondary tb-wide" type="button" @onclick="DateEditClick">DateEdit</button>
                </div>
                <div>
                    <button class="btn btn-secondary tb-wide" type="button" @onclick="NumberEditClick">NumberEdit</button>
                </div>
                <div>
                    <button class="btn btn-secondary tb-wide" type="button" @onclick="ActionButtonClick">ActionButton</button>
                </div>
            </div>

            <div class="forms-tb-buttons-field">
                <button class="btn btn-primary" type="button" @onclick="UpClick">
                    <span class="oi oi-arrow-circle-top"></span>
                </button>
            </div>

            <div class="forms-tb-buttons-field">
                <button class="btn btn-primary" type="button" @onclick="Downlick">
                    <span class="oi oi-arrow-circle-bottom"></span>
                </button>
            </div>
        }
        else
        {
            <div class="forms-tb-buttons">
                <div>
                    <button class="btn btn-secondary tb-wide" type="button" @onclick="ColumnClick">Column</button>
                </div>
                <div>
                    <button class="btn btn-secondary tb-wide" type="button" @onclick="ActionClick">Menu action</button>
                </div>
                <div>
                    <button class="btn btn-secondary tb-wide" type="button" @onclick="ActionButtonClick">Bottom button</button>
                </div>
            </div>

            <div class="forms-tb-buttons-hor">
                <button class="btn btn-primary" type="button" @onclick="UpClick">
                    <span class="oi oi-arrow-circle-left"></span>
                </button>
                &nbsp;
                <button class="btn btn-primary" type="button" @onclick="Downlick">
                    <span class="oi oi-arrow-circle-right"></span>
                </button>
            </div>
        }

        <div class="forms-tb-buttons">
            <button class="btn btn-secondary" type="button" @onclick="GenerateClick">
                Generate...
            </button>
        </div>

        <div class="forms-tb-buttons">
            <button class="btn btn-secondary" type="button" @onclick="ClearClick">
                Clear...
            </button>
        </div>
    </div>

    @code {
        [CascadingParameter]
        public IFormBuilderController FormController { get; set; }

        [Parameter]
        public double Height { get; set; }

        [Parameter]
        public EventCallback<ChangeEventArgs> ModelChanged { get; set; }

        private async Task TextEditClick(MouseEventArgs a)
        {
            FormController.AddTextEdit();
            await ModelChanged.InvokeAsync();
        }

        private async Task DropdownClick(MouseEventArgs a)
        {
            FormController.AddDropdown();
            await ModelChanged.InvokeAsync();
        }
        private async Task CheckboxClick(MouseEventArgs a)
        {
            FormController.AddCheckbox();
            await ModelChanged.InvokeAsync();
        }

        private async Task DateEditClick(MouseEventArgs a)
        {
            FormController.AddDateEdit();
            await ModelChanged.InvokeAsync();
        }
        private async Task NumberEditClick(MouseEventArgs a)
        {
            FormController.AddNumberEdit();
            await ModelChanged.InvokeAsync();
        }

        private async Task ActionButtonClick(MouseEventArgs a)
        {
            FormController.AddActionButton();
            await ModelChanged.InvokeAsync();
        }

        private async Task UpClick(MouseEventArgs a)
        {
            FormController.MoveUp();
            await ModelChanged.InvokeAsync();
        }

        private async Task Downlick(MouseEventArgs a)
        {
            FormController.MoveDown();
            await ModelChanged.InvokeAsync();
        }

        private async Task GenerateClick(MouseEventArgs a)
        {
            FormController.GenerateFromEntity();
            await ModelChanged.InvokeAsync();
        }

        private async Task ClearClick(MouseEventArgs a)
        {
            FormController.Clear();
            await ModelChanged.InvokeAsync();
        }

        private async Task ColumnClick(MouseEventArgs a)
        {
            FormController.AddColumn();
            await ModelChanged.InvokeAsync();
        }
        private async Task ActionClick(MouseEventArgs a)
        {
            FormController.AddColumnAction();
            await ModelChanged.InvokeAsync();
        }
    }
