@using Platz.ObjectBuilder.Blazor
@using Platz.ObjectBuilder.Blazor.Controllers
@using Platz.ObjectBuilder.Blazor.Model

@namespace Platz.ObjectBuilder.Blazor.Forms

@if (Field != null)
{
@*<div @onmouseover="@(e => { Field.FullView = true; })" @onmouseover:stopPropagation="true" @onmouseout:stopPropagation="true" @onmouseout="@(e => { Field.FullView = false; })">*@
<div>
    @if (Field.Active || Field.FullView)
    {
    <div class="forms-widget-preview" @onclick="CaptionClick" @onclick:stopPropagation="true">
        <div class="forms-widget @GetCaptionClass()">
            &nbsp;
            @($"{Field.Order}: {Field.StoreField.Label} {GetControlName()}({Field.StoreField.BindingProperty})")

            <div class="float-right">
                <button class="btn btn-danger btn-sm" title="Cancel" @onclick="@(async (args) => await DeleteClick(args, Field.StoreField.BindingProperty))"
                        style="display: block; margin-left: auto; margin-right: 0;">
                    <span class="oi oi-x"></span>
                </button>
            </div>
        </div>

        <div class="forms-widget-body">
        
            @switch (Field.ComponentType)
            { 
                case FieldComponentType.TextEdit:
                    <DesignTextEditComponent Field="@Field" ModelChanged="@ModelChanged" />
                    break;
                case FieldComponentType.ActionButton:
                    <DesignActionButtonComponent Field="@Field" ModelChanged="@ModelChanged" />
                    break;
            }

        </div>
    </div>
    }
    else
    {
            
        <div @onclick="CaptionClick" @onclick:stopPropagation="true">
            <div class="forms-widget forms-widget-preview">

                <div class="forms-grid">
                    <div class="row-nospace-sm">
                        <div class="col-sm-1 forms-nospace">
                             @($"{Field.Order}:")
                        </div>
                        <div class="col-sm-5 forms-nospace">
                            @if (Field.ComponentType != FieldComponentType.ActionButton && Field.ComponentType != FieldComponentType.Checkbox)
                            {
                            <label>@GetLabelText()</label>
                            }
                        </div>
                        <div class="col-sm-6 forms-nospace widget-preview">
                            @if (Field.ComponentType != FieldComponentType.ActionButton)
                            {
                            <small class="widget-preview-sign">
                                @GetBindingText()
                            </small>
                            }

                            @switch (Field.ComponentType)
                            {
                                case FieldComponentType.TextEdit:
                                    <input value="Text" class="form-control" readonly="readonly" />
                                    break;
                                case FieldComponentType.DateEdit:
                                    <input type="date" class="form-control" readonly="readonly" />
                                    break;
                                case FieldComponentType.NumberEdit:
                                    <input type="number" class="form-control" value="100.00" readonly="readonly" />
                                    break;
                                case FieldComponentType.Checkbox:
                                    <input type="checkbox" class="" checked="checked" readonly="readonly" id="check222"/>
                                    <label for="check222">@GetLabelText()</label>
                                    break;
                                case FieldComponentType.Dropdown:
                                    <select value="Select" class="form-control" readonly="readonly" >
                                        <option value="Select">Select</option>
                                    </select>
                                    break;
                                case FieldComponentType.ActionButton:
                                    <button class="@GetButtonClass()">@Field.StoreButton.Text</button>
                                    break;
                            }
                        </div>
                    </div>
                </div>

            </div>
        </div>
    }
    </div>
}


@code {
    [CascadingParameter]
    public IFormBuilderController FormsPageController { get; set; }

    [Parameter]
    public FieldComponentModel Field { get; set; }

    [Parameter]
    public EventCallback<ChangeEventArgs> ModelChanged { get; set; }

    //private bool _fullView;

    private string GetCaptionClass()
    {
        return Field.Active ? "forms-cap-active" : "forms-cap";
    }

    private string GetBindingText()
    {
        var s = Field.StoreField.BindingProperty;
        return string.IsNullOrWhiteSpace(s) ? "Empty binding" : s;
    }
    private string GetLabelText()
    {
        var s = Field.StoreField.Label;
        return string.IsNullOrWhiteSpace(s) ? "Empty label" : s;
    }

    private string GetButtonClass()
    {
        switch (Field.StoreButton.Action)
        {
            case "Submit":
                return "btn btn-primary";
            case "Cancel":
            case "Close":
                return "btn btn-info";
            case "Delete":
                return "btn btn-danger";
            default:
                return "btn btn-secondary";
        }
    }

    private async Task DeleteClick(MouseEventArgs e, string binding)
    {
        FormsPageController.DeleteField(Field);
        await ModelChanged.InvokeAsync();
    }

    private async Task CaptionClick(MouseEventArgs e)
    {
        FormsPageController.SetActive(Field);
        await ModelChanged.InvokeAsync();
    }

    private string GetControlName()
    {
        return Field.ComponentType.ToString();

        switch (Field.ComponentType)
        {
            case FieldComponentType.Dropdown:
                return "Dropdown";
            case FieldComponentType.DateEdit:
                return "Date Edit";

            case FieldComponentType.TextEdit:
            default:
                return "Text Edit";
        }
    }
}
