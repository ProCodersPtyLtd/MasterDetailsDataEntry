@using Platz.ObjectBuilder.Blazor.Model
@using Platz.SqlForms 

@namespace Platz.ObjectBuilder.Blazor.Forms



    @if (Field.ComponentType == FieldComponentType.Column)
    {
        <DesignPropertiesColumnComponent Field="Field" ModelChanged="ModelChanged"/>

    } else if (Field.ComponentType == FieldComponentType.ColumnAction)
    {
        <DesignPropertiesColumnActionComponent Field="Field" ModelChanged="ModelChanged"/>
    }
    else
    {

    <div class="forms-uncap">Field @($"{GetComponentTypeName()}") properties</div>

        <div class="forms-grid">
            @if (Field.ComponentType == FieldComponentType.ActionButton)
            {
                <div class="row-nospace-sm">
                    <div class="col-sm-4 forms-nospace">
                        Action
                    </div>
                    <div class="col-sm-8 forms-nospace">
                        <select id="ActionInput" value="@Field.StoreButton.Action" class="form-control" @onchange="ButtonActionChanged">

                            @foreach (var b in GetButtonActionTypes())
                            {
                                <option value="@b">@b</option>
                            }
                        </select>
                    </div>
                </div>

                <div class="row-nospace-sm">
                    <div class="col-sm-4 forms-nospace">
                        Text
                    </div>
                    <div class="col-sm-8 forms-nospace">
                        <input id="BindingInput" value="@Field.StoreButton.Text" @onchange="ButtonTextChanged" class="form-control" />
                    </div>
                </div>

                <div class="row-nospace-sm">
                    <div class="col-sm-4 forms-nospace">
                        Hint
                    </div>
                    <div class="col-sm-8 forms-nospace">
                        <input id="BindingInput" value="@Field.StoreButton.Hint" @onchange="ButtonHintChanged" class="form-control" />
                    </div>
                </div>

                <div class="row-nospace-sm">
                    <div class="col-sm-4 forms-nospace">
                        Attributes
                    </div>
                    <div class="col-sm-8 forms-nospace">
                        <input type="checkbox" class="" checked="@Field.StoreButton.Hidden" @onchange="ButtonHiddenChanged" id="check33" />
                        <label for="check33">Hidden</label>
                        <br />
                        <input type="checkbox" class="" checked="@Field.StoreButton.ReadOnly" @onchange="ButtonReadOnlyChanged" id="check22" />
                        <label for="check22">Read only</label>
                    </div>
                </div>

                <div class="row-nospace-sm">
                    <div class="col-sm-4 forms-nospace">
                        Navigation Link
                    </div>
                    <div class="col-sm-8 forms-nospace">
                        @*<input id="BindingInput" value="@Field.StoreButton.LinkText" @onchange="ButtonLinkChanged" class="form-control" />*@
                        <input id="BindingInput" value="@GetNavigationLinkText()" readonly="readonly" class="form-control" />
                    </div>
                </div>

                <div class="row-nospace-sm">
                    <div class="col-sm-4 forms-nospace">
                        Target form
                    </div>
                    <div class="col-sm-8 forms-nospace">
                        <select class="form-control selectpicker" value="@Field.StoreButton.NavigationTargetForm" @onchange="NavigationTargetFormChanged">
                            <option value=""></option>

                            @foreach (var item in _ctrl.GetAvailableFormReferences())
                            {
                                <option value="@item">@item</option>
                            }
                        </select>
                    </div>
                </div>

                <div class="row-nospace-sm">
                    <div class="col-sm-4 forms-nospace">
                        Parameters mapping
                    </div>

                    @if (Field.StoreButton.NavigationParameterMapping.Count == 0)
                    {
                        <div class="col-sm-8 forms-nospace">
                            Target form has no parameters defined
                        </div>
                    }
                    else
                    {
                        <div class="col-sm-8 forms-nospace">
                            @*<div class="plk-flex overflow-auto" style="min-height: 160px; height: 160px">*@
                                <div style="background-color: lightgrey ">
                                    <table style="width: 100%">
                                        <tr>
                                            <th>Target form parameter</th>
                                            <th>This form parameter</th>
                                        </tr>

                                        @for (int i = 0; i < Field.StoreButton.NavigationParameterMapping.Count; i++)
                                        {
                                            var rowIndex = i;

                                            <tr>
                                                <td>@Field.StoreButton.NavigationParameterMapping[i].Name</td>

                                                <td>
                                                    <select class="form-control selectpicker" 
                                                            value="@Field.StoreButton.NavigationParameterMapping[rowIndex].SupplyingParameterMapping" 
                                                            @onchange="async (a) => await NavigationParameterChanged(a, rowIndex)">
                                                        <option value=""></option>

                                                        @foreach (var item in _ctrl.GetAvailableFormParameters())
                                                        {
                                                            <option value="@item">@item</option>
                                                        }
                                                    </select>
                                                </td>
                                            </tr>
                                        }
                                    </table>
                                </div>
                            @*</div>*@
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="row-nospace-sm">
                    <div class="col-sm-4 forms-nospace">
                        @if (Field.ComponentType == FieldComponentType.Column)
                        {
                            @:Column header
                        }
                        else
                        {
                            @:Label
                        }
                    </div>
                    <div class="col-sm-8 forms-nospace">
                        <input id="BindingInput" value="@Field.StoreField.Label" @onchange="LabelChanged" class="form-control" />
                    </div>
                </div>

                <div class="row-nospace-sm">
                    <div class="col-sm-4 forms-nospace">
                        Binding
                    </div>
                    <div class="col-sm-8 forms-nospace">
                        <select id="BindingInput" value="@Field.StoreField.BindingProperty" class="form-control" @onchange="BindingChanged">
                            <option value=""></option>

                            @foreach (var b in FormsPageController.GetEntityBindings())
                            {
                                <option value="@b">@b</option>
                            }
                        </select>
                    </div>
                </div>

                <div class="row-nospace-sm">
                    <div class="col-sm-4 forms-nospace">
                        Format
                    </div>
                    <div class="col-sm-8 forms-nospace">
                        <input id="BindingInput" @bind-value="Field.StoreField.Format" class="form-control" />
                    </div>
                </div>

                @if (Field.ComponentType == FieldComponentType.Column)
                {
                    <div class="row-nospace-sm">
                        <div class="col-sm-4 forms-nospace">
                            Attributes
                        </div>
                        <div class="col-sm-8 forms-nospace">
                            <input type="checkbox" class="" checked="@Field.StoreField.PrimaryKey" @onchange="PrimaryKeyChanged" id="check1" />
                            <label for="check1">Primary Key</label>
                            <br />
                            <input type="checkbox" class="" checked="@Field.StoreField.Hidden" @onchange="HiddenChanged" id="check3" />
                            <label for="check3">Hidden</label>
                        </div>
                    </div>
                }
                else
                {
                    <div class="row-nospace-sm">
                        <div class="col-sm-4 forms-nospace">
                            Attributes
                        </div>
                        <div class="col-sm-8 forms-nospace">
                            <input type="checkbox" class="" checked="@Field.StoreField.Required" @onchange="RequiredChanged" id="check1" />
                            <label for="check1">Required</label>
                            <br />
                            <input type="checkbox" class="" checked="@Field.StoreField.Hidden" @onchange="HiddenChanged" id="check3" />
                            <label for="check3">Hidden</label>
                            <br />
                            <input type="checkbox" class="" checked="@Field.StoreField.ReadOnly" @onchange="ReadOnlyChanged" id="check2" />
                            <label for="check2">Read only</label>
                        </div>
                    </div>
                }
            }
        </div>
    }

@code {
    [CascadingParameter]
    public IFormBuilderController FormsPageController { get; set; }

    [Parameter]
    public FieldComponentModel Field { get; set; }

    [Parameter]
    public EventCallback<ChangeEventArgs> ModelChanged { get; set; }

    private IFormBuilderController _ctrl { get { return FormsPageController; } }

    private string GetComponentTypeName()
    {
        switch (Field.ComponentType)
        {
            case FieldComponentType.ActionButton:
                return "Button";
            default:
                return Field.ComponentType.ToString();
        }
    }

    private async Task SchemaChanged(ChangeEventArgs a)
    {
        _ctrl.Model.Schema = a.Value.ToString();
        _ctrl.RefreshDatasources();
    }

    private async Task DatasourceChanged(ChangeEventArgs a)
    {
        _ctrl.Model.Datasource = a.Value.ToString();
    }

    private async Task EditFormChanged(ChangeEventArgs a)
    { }

    private async Task ListFormChanged(ChangeEventArgs a)
    { }

    private async Task Change()
    {
        FormsPageController.Change();
        await ModelChanged.InvokeAsync();
    }

    private string GetNavigationLinkText()
    {
        var result = $"{Field.StoreButton.NavigationTargetForm}";

        foreach (var p in Field.StoreButton.NavigationParameterMapping)
        {
            result += $"/{{{p.SupplyingParameterMapping}}}";
        }

        return result;
    }

    private List<ButtonActionTypes> GetButtonActionTypes()
    {
        var result = Enum.GetValues(typeof(ButtonActionTypes)).Cast<ButtonActionTypes>().ToList();
        return result;
    }

    private async Task ButtonTextChanged(ChangeEventArgs args)
    {
        Field.StoreButton.Text = args.Value.ToString();
        await Change();
    }
    private async Task ButtonActionChanged(ChangeEventArgs args)
    {
        Field.StoreButton.Action = args.Value.ToString();
        var actions = GetButtonActionTypes();

        // if empty or equal to action from list - was set automatically
        if (string.IsNullOrWhiteSpace(Field.StoreButton.Text) || actions.Any(a => a.ToString() == Field.StoreButton.Text))
        {
            Field.StoreButton.Text = Field.StoreButton.Action;
        }

        await Change();
    }
    private async Task ButtonHintChanged(ChangeEventArgs args)
    {
        Field.StoreButton.Hint = args.Value.ToString();
        await Change();
    }
    //private async Task ButtonLinkChanged(ChangeEventArgs args)
    //{
    //    Field.StoreButton.LinkText = args.Value.ToString();
    //    FormsPageController.Change();
    //}
    private async Task NavigationTargetFormChanged(ChangeEventArgs args)
    {
        Field.StoreButton.NavigationTargetForm = args.Value.ToString();
        FormsPageController.PreloadButtonParameters(Field);
        await Change();
    }
    private async Task NavigationParameterChanged(ChangeEventArgs args, int row)
    {
        Field.StoreButton.NavigationParameterMapping[row].SupplyingParameterMapping = args.Value.ToString();
        await Change();
    }
    private async Task ButtonReadOnlyChanged(ChangeEventArgs args)
    {
        Field.StoreButton.ReadOnly = Convert.ToBoolean(args.Value);
        await Change();
    }
    private async Task ButtonHiddenChanged(ChangeEventArgs args)
    {
        Field.StoreButton.Hidden = Convert.ToBoolean(args.Value);
        await Change();
    }
        
    private async Task LabelChanged(ChangeEventArgs args)
    {
        Field.StoreField.Label = args.Value.ToString();
        await Change();
    }
    private async Task BindingChanged(ChangeEventArgs args)
    {
        Field.StoreField.BindingProperty = args.Value.ToString();

        if (string.IsNullOrWhiteSpace(Field.StoreField.Label))
        {
            Field.StoreField.Label = Field.StoreField.BindingProperty.Replace("$.", "");
        }

        await Change();
    }

    private async Task RequiredChanged(ChangeEventArgs args)
    {
        Field.StoreField.Required = Convert.ToBoolean(args.Value);
        await Change();
    }
    private async Task ReadOnlyChanged(ChangeEventArgs args)
    {
        Field.StoreField.ReadOnly = Convert.ToBoolean(args.Value);
        await Change();
    }
    private async Task HiddenChanged(ChangeEventArgs args)
    {
        Field.StoreField.Hidden = Convert.ToBoolean(args.Value);
        await Change();
    }
    private async Task PrimaryKeyChanged(ChangeEventArgs args)
    {
        Field.StoreField.PrimaryKey = Convert.ToBoolean(args.Value);
        await Change();
    }
}
