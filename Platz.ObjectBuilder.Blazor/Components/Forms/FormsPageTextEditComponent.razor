@using Platz.ObjectBuilder.Blazor
@using Platz.ObjectBuilder.Blazor.Controllers
@using Platz.ObjectBuilder.Blazor.Model

@namespace Platz.ObjectBuilder.Blazor.Forms

<table>
    <tr>
        <td>
            Label
            <input id="LabelInput" value="@Field.StoreField.Label" class="form-control" @onchange="LabelChanged" />
        </td>
        <td>
            @*Binding
            <input id="BindingInput" value="@Field.StoreField.BindingProperty" class="form-control" @onchange="BindingChanged" />*@
            Advanced
            <div>
                <button class="btn btn-light btn-sm" @onclick="RulesClick">Binding ...</button>
                &nbsp;
                <button class="btn btn-light btn-sm" @onclick="RulesClick">Rules[1] ...</button>
                &nbsp;
                <button class="btn btn-light btn-sm" @onclick="RulesClick">Events ...</button>
            </div>
        </td>
    </tr>
    <tr>
        <td colspan="2">
            <input type="checkbox" class="" checked="@Field.StoreField.Required" @onchange="RequiredChanged" id="check1" />
            <label for="check1">Required</label>
            &nbsp;
            <input type="checkbox" class="" checked="@Field.StoreField.Hidden" @onchange="RequiredChanged" id="check3" />
            <label for="check3">Hidden</label>
            &nbsp;
            <input type="checkbox" class="" checked="@Field.StoreField.ReadOnly" @onchange="ReadOnlyChanged" id="check2" />
            <label for="check2">Read only</label>
        </td>
    </tr>

    @if (Field.Active)
    {
    <tr>
        <td>
            Format
            <input id="LabelInput" value="@Field.StoreField.Format" class="form-control" @onchange="FormatChanged" />
        </td>
        <td>
           
        </td>
    </tr>
    }
</table>

@code {
    [Parameter]
    public FieldComponentModel Field { get; set; }

    [Parameter]
    public EventCallback<ChangeEventArgs> ModelChanged { get; set; }

    private async Task LabelChanged(ChangeEventArgs args)
    {
    }
    private async Task BindingChanged(ChangeEventArgs args)
    {
    }
    private async Task RequiredChanged(ChangeEventArgs args)
    {
    }
    private async Task ReadOnlyChanged(ChangeEventArgs args)
    {
    }
    private async Task FormatChanged(ChangeEventArgs args)
    {
    }
    private async Task RulesClick(MouseEventArgs args)
    {
    }


}
