@using Platz.ObjectBuilder.Blazor
@using Platz.ObjectBuilder.Blazor.Controllers
@using Platz.ObjectBuilder.Blazor.Forms
@using Platz.ObjectBuilder.Blazor.Model
@using Platz.SqlForms
@using Platz.SqlForms.Shared

@namespace Platz.ObjectBuilder

@inject IFormBuilderController _formsPageController
@inject IJSRuntime JS

<CascadingValue Value="@_formsPageController">

    @*<div class="container" style="margin-left: 0; margin-right: 0">*@
    <div class="forms-big" style="padding: 5px 0 0 0;">
        <div class="row">
            <div class="col-lg-12">
                @if (_formsPageController.Model.IsListForm)
                {
                    <DesignListFormPageContentComponent ModelChanged="ModelChanged" />
                }
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6" style="padding: 0 0 0 15px;">
                @if (!_formsPageController.Model.IsListForm)
                {
                    <DesignPageContentComponent Height="Height" ModelChanged="ModelChanged" />
                }
            </div>
            <div class="col-lg-1" style="padding: 0 5px 0 5px;">
                <FormsPageToolbarComponent Height="Height" ModelChanged="ModelChanged" />
            </div>
            <div class="col-lg-5" style="padding: 0 15px 0 0;">

                    <FormsPropertiesComponent ModelChanged="ModelChanged" />

                @*<FormsInfoComponent ModelChanged="ModelChanged" />*@
            </div>
        </div>
    </div>

    @*<div style="width: 520px">
            <FormsPageContentComponent Height="780" ModelChanged="ModelChanged" />
        </div>
        <div>
            <FormsFieldPropertiesComponent />
        </div>*@

</CascadingValue>

<div class="modal fade" id="fieldRulesModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Rules</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="form-group">
                        @if (_rules.Count == 0)
                        {
                            @:no rules defined
                        }
                        else
                        {
                            <div class="list-group overflow-auto" id="list-tab" role="tablist" style="max-height: 200px;">
                                @for (int i = 0; i < _rules.Count; i++)
                                {
                                    var rowIndex = i;

                                    <a class="list-group-item list-group-item-action @(i == _formsPageController.SelectedRuleIndex ? "active": "")"
                                       @onclick="() => RuleClick(rowIndex)" data-toggle="list" href="#list-home" role="tab" aria-controls="home">@_rules[i].DisplayName</a>
                                }
                            </div>
                        }
                        <br />
                        <button type="button" class="btn btn-success" @onclick="AddRulesClick">Add</button>
                        &nbsp;
                        <button type="button" class="btn btn-danger" @onclick="DeleteRulesClick">Delete</button>
                    </div>
                    <div class="form-group">

                        @if (SelectedFieldRule != null)
                        {
                            <div class=".forms-big">
                                <div class="row-nospace-sm">
                                    <div class="col-sm-6 forms-nospace">
                                        Name
                                        <input id="NameInput" value="@SelectedFieldRule.Name" class="form-control" @onchange="RuleNameChanged" />
                                    </div>
                                    <div class="col-sm-6 forms-nospace">
                                        Trigger
                                        <select id="BindingInput" value="@SelectedFieldRule.Trigger" class="form-control" @onchange="RuleTriggerChanged">
                                            @*<option value=""></option>*@

                                            @foreach (var b in GetRuleTriggers())
                                            {
                                                <option value="@b">@b.ToString()</option>
                                            }
                                        </select>
                                    </div>
                                </div>

                                <div class="row-nospace-sm">
                                    <div class="col-sm-12 forms-nospace">
                                        <label>@GetMethodDefinition()</label>
                                        <textarea id="exampleFormControlTextarea1" rows="8" style="width: 100%" value="@SelectedFieldRule.Code" @onchange="RuleCodeChanged" />
                                    </div>
                                </div>

                                @if (_showRulesErrors)
                                {
                                    <div class="row-nospace-sm">
                                        <div class="col-sm-12 forms-nospace">
                                            <label>Validation errors</label>
                                            <textarea id="rulesErrorsMemo" rows="4" readonly="readonly" style="width: 100%; color: red; background-color: black" value="@_rulesErrors" />
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-secondary" @onclick="ValidateRulesClick">Validate</button>
                <button type="button" class="btn btn-primary" @onclick="SaveRulesClick">Save Rules</button>
            </div>
        </div>
    </div>
</div>

@code
{
    [Parameter]
    public double Height { get; set; } = 780;

    [Parameter]
    public EventCallback<ChangeEventArgs> ModelChanged { get; set; }

    //private async Task ModelChanged(ChangeEventArgs args)
    //{
    //    StateHasChanged();
    //}

    private bool _showRulesErrors;
    private string _rulesErrors;
    private Task<IJSObjectReference> _module;
    private Task<IJSObjectReference> Module => _module ??= JS.InvokeAsync<IJSObjectReference>("import", "./_content/Platz.ObjectBuilder.Blazor/objectBuilder.js").AsTask();


    private List<FieldRuleModel> _rules = (new FieldRuleModel[] { new FieldRuleModel { Name = "MyRule1", Trigger = FormRuleTriggers.Change, Code = "" } }).ToList();
    //private int SelectedRuleIndex;
    public FieldRuleModel SelectedFieldRule
    {
        get
        {
            if (_formsPageController.SelectedRuleIndex == -1 || _formsPageController.SelectedRuleIndex >= _rules.Count)
            {
                return null;
            }
            else
            {
                return _rules[_formsPageController.SelectedRuleIndex];
            }
        }
    }

    protected override void OnInitialized()
    {
        _rules = _formsPageController.ActiveFieldRules;
    }

    private List<FormRuleTriggers> GetRuleTriggers()
    {
        //var result = Enum. GetNames(typeof(Platz.SqlForms.FormRuleTriggers)).ToList();
        var result = Enum.GetValues(typeof(FormRuleTriggers)).Cast<FormRuleTriggers>().ToList();
        return result;
    }

    private string GetMethodDefinition()
    {
        var ds = _formsPageController.Model.Datasource ?? "to_be_defined";
        var result = $"public FormRuleResult {SelectedFieldRule.Name}(RuleArgs<{ds}> a)";
        return result;
    }


    //private List<FieldRuleModel> GetRules()
    //{
    //    return _rules;
    //}

    private string GetRuleName()
    {
        for (int i = 1; i < 999; i++)
        {
            var name = $"{_formsPageController.ActiveField.StoreField.Label.TrimName()}Rule{i}";

            if (!_rules.Any(r => r.Name == name))
            {
                return name;
            }
        }

        return "Rule1";
    }

    private async Task AddRulesClick(MouseEventArgs a)
    {
        _rules.Add(new FieldRuleModel { IsDirty = true, Name = GetRuleName(), Trigger = FormRuleTriggers.ChangeSubmit });
        SelectRule(_rules.Count - 1);
    }
    private async Task DeleteRulesClick(MouseEventArgs a)
    {
        if (SelectedFieldRule != null)
        {
            _rules.Remove(SelectedFieldRule);
        }
    }
    private async Task RuleNameChanged(ChangeEventArgs a)
    {
        SelectedFieldRule.IsDirty = true;
        SelectedFieldRule.Name = a.Value.ToString();
    }
    private async Task RuleTriggerChanged(ChangeEventArgs a)
    {
        SelectedFieldRule.IsDirty = true;
        SelectedFieldRule.Trigger = Enum.Parse<FormRuleTriggers>(a.Value.ToString());
    }
    private async Task RuleCodeChanged(ChangeEventArgs a)
    {
        SelectedFieldRule.IsDirty = true;
        SelectedFieldRule.Code = a.Value.ToString();
    }

    private async Task<bool> ValidateRulesClick(MouseEventArgs a)
    {
        _showRulesErrors = false;
        _rulesErrors = "";
        var result = await _formsPageController.ValidateDirtyRules(_formsPageController.ActiveFieldRules);

        if (result.Any())
        {
            _showRulesErrors = true;

            foreach (var row in result)
            {
                _rulesErrors += row + "\r\n";
            }

            return false;
        }

        return true;
    }

    private async Task SaveRulesClick(MouseEventArgs a)
    {
        var ok = await ValidateRulesClick(a);

        if (ok)
        {
            _formsPageController.ApplyActiveFieldRules(_formsPageController.ActiveFieldRules);
            var module = await Module;
            await module.InvokeVoidAsync("HideModal", new object[] { "#fieldRulesModal" });
        }
    }

    private async Task RuleClick(int index)
    {
        SelectRule(index);
    }

    private void SelectRule(int index)
    {
        _formsPageController.SelectedRuleIndex = index;
        StateHasChanged();

        //if (_formsPageController.SelectedRuleIndex == -1)
        //{
        //    SelectedFieldRule = null;
        //}
        //else
        //{
        //    SelectedFieldRule = _rules[_formsPageController.SelectedRuleIndex];
        //}
    }
}