@namespace Platz.ObjectBuilder.Blazor

<h6>Select</h6>

<div class="plk-flex overflow-auto" style="min-height: 300px; height: 300px">
    <div style="background-color: lightgreen; min-height: 300px; ">
        <table>
            <tr>
                <th>Column</th>
                <th style="width: 60px">Output</th>
                <th>Alias</th>
                <th>Filter</th>
                <th>GroupBy</th>
            </tr>

            @for (int rowIndex = 0; rowIndex < _properties.Count; rowIndex++)
            {
                var item = _properties[rowIndex];
                var row = rowIndex;

                <tr>
                    <td>
                        @GetPropertyName(row)
                    </td>
                    <td style="text-align: center">
                        <input type="checkbox" checked="@GetOutputValue(row)" @onchange="@(async (args) => await OutputClick(args, row))" />
                    </td>
                    <td>
                        <input style="width: 120px;" @bind-value="@_properties[row].Alias"/>
                    </td>
                    <td>
                        <input style="width: 120px;" value="@_properties[row].Filter" @onchange="@(async (args) => await FilterChanged(args, row))" />
                    </td>
                    <td style="text-align: center">
                        <input type="checkbox" checked="@GetGroupByValue(row)" @onchange="@(async (args) => await GroupByClick(args, row))" />
                    </td>
                </tr>
            }
        </table>
    </div>
</div>

    @code {
        [CascadingParameter]
        public IQueryController QueryController { get; set; }

        [Parameter]
        public EventCallback<ChangeEventArgs> ModelChanged { get; set; }

        private List<QuerySelectProperty> _properties
        {
            get
            {
                return QueryController.SelectionProperties;
            }
        }

        private string GetPropertyName(int rowIndex)
        {
            var item = _properties[rowIndex];
            var result = $"{item.FromTable.Alias}.{item.StoreProperty.Name}";
            return result;
        }

        private string GetOutputValue(int rowIndex)
        {
            var result = _properties[rowIndex].IsOutput == true ? "checked" : null;
            return result;
        }

        private async Task OutputClick(ChangeEventArgs e, int rowIndex)
        {
            _properties[rowIndex].IsOutput = (bool)e.Value;
        }

        private string GetGroupByValue(int rowIndex)
        {
            var result = _properties[rowIndex].IsGroup == true ? "checked" : null;
            return result;
        }

        private async Task GroupByClick(ChangeEventArgs e, int rowIndex)
        { }

        private async Task FilterChanged(ChangeEventArgs e, int rowIndex)
        {
            QueryController.ApplySelectPropertyFilter(_properties[rowIndex], (string)e.Value);
            _properties[rowIndex].Filter = (string)e.Value;
            await ModelChanged.InvokeAsync(null);
        }


    }
