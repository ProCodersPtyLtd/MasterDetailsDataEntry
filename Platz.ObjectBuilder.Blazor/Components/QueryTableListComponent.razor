@using Platz.SqlForms

@namespace Platz.ObjectBuilder.Blazor
@*<h6>Entities</h6>*@

<div class="accordion overflow-auto" id="accordionTableList" style="height: 780px;">

    @{
        var rowIndex = 0;

        @foreach (var tbl in _tables)
        {
            var row = rowIndex;

        <div class="card" @onmouseover="@(e => RowMouseOver(e, row))" @onmouseout="@(e => RowMouseOut(e, row))">
            <div class="card-header" id="headingOne">
                <table>
                    <tr>
                        <td style="width: 40px">
                            <button class="btn btn-light btn-sm" title="Add" @onclick="@(async () => await RowClick(row))" hidden="@(!_buttonsVisible[rowIndex])">
                                <span class="oi oi-plus"></span>
                            </button>
                        </td>

                        <td>
                            <h2 class="mb-0">


                                <button class="btn btn-block text-left" type="button" data-toggle="collapse"
                                        data-target="#@(GetCollapseName(tbl))" aria-expanded="false" aria-controls="@GetCollapseName(tbl)">
                                    @tbl.Name
                                </button>
                            </h2>

                        </td>
                    </tr>
                </table>
            </div>
        </div>

        <div id="@GetCollapseName(tbl)" class="collapse" aria-labelledby="headingOne" data-parent="#accordionTableList">
            @if (tbl.IsSubQuery)
            {
                <label>Subquery</label>
                <input value="@tbl.Name" @onchange="async(a) => await QueryNameChanged(a, row)" class="form-control"  />

                <label>Columns</label>
                <table class="table-cols" style="width: 100%">
                    <tr>
                        <th style="width: 28px"></th>
                        <th style="width: auto"></th>
                        <th style="width: 70px"></th>
                        <th style="width: 28px"></th>
                    </tr>
                    @for (int ind = 0; ind < tbl.Query.SelectionProperties.Count; ind++)
                    {
                        var item = tbl.Query.SelectionProperties[ind];

                        <tr>
                            <td>
                                @if (item.StoreProperty.Pk)
                                {
                                    <b>PK</b>
                                }
                                @if (item.StoreProperty.Fk)
                                {
                                    @:FK
                                }
                            </td>
                            <td>
                                @item.OutputName
                            </td>
                            <td>
                                @item.ResolvedType
                            </td>
                            <td>
                                @if (item.StoreProperty.Nullable)
                                {
                                    @:Null
                                }
                            </td>
                        </tr>
                    }
                </table>
            }
            else
            {
                <div class="card-body">
                    Table columns here
                </div>
            }
        </div>

            rowIndex++;
        }
    }
</div>


@code {
    [CascadingParameter]
    public IQueryController QueryController { get; set; }

    [Parameter]
    public EventCallback<ChangeEventArgs> ModelChanged { get; set; }

    private List<DesignQueryObject> _tables;
    private List<bool> _buttonsVisible;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        _tables = QueryController.GetAvailableQueryObjects();
        _buttonsVisible = _tables.Select(d => false).ToList();
    }

    private string GetCollapseName(DesignQueryObject tbl)
    {
        var result = $"collapse{tbl.Name}";
        return result;
    }

    private async Task RowClick(int rowIndex)
    {
        QueryController.AddFromTable(_tables[rowIndex]);
        await ModelChanged.InvokeAsync(null);
    }

    private void RowMouseOver(MouseEventArgs args, int rowIndex)
    {
        _buttonsVisible[rowIndex] = true;
    }

    private void RowMouseOut(MouseEventArgs args, int rowIndex)
    {
        _buttonsVisible[rowIndex] = false;
    }

    private async Task QueryNameChanged(ChangeEventArgs args, int index)
    {
        _tables[index].Name = args.Value as string;
        await ModelChanged.InvokeAsync(null);
    }
}
