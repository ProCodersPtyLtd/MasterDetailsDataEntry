@using Platz.ObjectBuilder.Blazor.Controllers
@using System.IO
@using Plk.Blazor.DragDrop

@inject IJSRuntime JS

@implements IAsyncDisposable

@namespace Platz.ObjectBuilder

<h5>Schema Diagram</h5>

<div class="grid-container overflow-auto" style="min-height: 600px; height: @(Height)px; width: auto;" @onscroll="() => Refresh()">
    <div class="svg-panel-container2" style="z-index: -10; position: absolute; opacity: 0.9; width: 450px;">
        <svg @ref="_svgRef" width="auto" height="@(Height)">
            @if (_lines != null)
            {
                @foreach (var l in _lines)
                {
                    <line x1="@l.X1" y1="@l.Y1" x2="@l.X2" y2="@l.Y2" stroke="black" stroke-width="3px" stroke-linecap="round" />
                }
            }
            @*<line x1="0" y1="0" x2="300" y2="500" stroke="black" stroke-width="4px" stroke-linecap="round" />*@
        </svg>
    </div>

    <Dropzone Class="drag-container" Items="SchemaController.GetDiagramTables()" ItemWrapperClass="drag-item">
        <div>
            @*<div class="grid-item">@context.Name</div>*@
            <SchemaDiagramTableComponent Table="@context" ModelChanged="ModelChanged" />
        </div>
    </Dropzone>
</div>

@code {
    [CascadingParameter]
    public ISchemaController SchemaController { get; set; }

    [Parameter]
    public double Height { get; set; }

    [Parameter]
    public EventCallback<ChangeEventArgs> ModelChanged { get; set; }

    private ElementReference _svgRef;
    private bool _needRefreshLinks;
    private List<LinePoints> _lines { get; set; }
    private Task<IJSObjectReference> _module;
    private Task<IJSObjectReference> Module => _module ??= JS.InvokeAsync<IJSObjectReference>("import", "./_content/Platz.ObjectBuilder.Blazor/objectBuilder.js").AsTask();

    private int _renderPass = 0;

    protected override async Task OnInitializedAsync()
    {
        //var module = await Module;
        //await module.InvokeVoidAsync("PreventLeaveApp", new object[] { });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_renderPass == 0)
        {
            _renderPass++;
            _needRefreshLinks = true;
            StateHasChanged();
        }
        else if (_renderPass == 1)
        {
            _renderPass++;

            if (_needRefreshLinks)
            {
                _needRefreshLinks = false;
                await GenerateLinks();
                StateHasChanged();
            }
        }
        else
        {
            _renderPass = 0;
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_module != null)
        {
            var module = await _module;
            await module.DisposeAsync();
        }
    }

    private void Refresh()
    {
        _needRefreshLinks = true;
        _renderPass = 1;
        StateHasChanged();
    }

    private async Task GenerateLinks()
    {
        _lines = new List<LinePoints>();
        var links = SchemaController.GetTableLinks();

        foreach (var link in links)
        {
            var lines = await GetLinkLines(link);
            _lines.AddRange(lines);
        }
    }

    int _lineStepSize = 16;

    // returns 3 lines
    private async Task<List<LinePoints>> GetLinkLines(TableLink link)
    {
        var result = new List<LinePoints>();
        var spConv = await ConvertToSvg(link.PrimaryRefId);
        var spConvRight = new Point { X = spConv.X + (link.Order + 1) * _lineStepSize, Y = spConv.Y };
        var epConv = await ConvertToSvg(link.ForeignRefId);
        var epConvRight = new Point { X = epConv.X + (link.Order + 1) * _lineStepSize, Y = epConv.Y };

        var line1 = new LinePoints { X1 = spConv.X, Y1 = spConv.Y, X2 = spConvRight.X, Y2 = spConvRight.Y };
        result.Add(line1);
        var line2 = new LinePoints { X1 = spConvRight.X, Y1 = spConvRight.Y, X2 = epConvRight.X, Y2 = epConvRight.Y };
        result.Add(line2);
        var line3 = new LinePoints { X1 = epConvRight.X, Y1 = epConvRight.Y, X2 = epConv.X, Y2 = epConv.Y };
        result.Add(line3);

        return result;
    }

    private async Task<Point> ConvertToSvg(string refId)
    {
        var module = await Module;
        var startRect = await module.InvokeAsync<BoundingClientRect>("MyIdGetBoundingClientRect", new object[] { refId });
        var sp = new Point { X = startRect.X + 0.5 * startRect.Width, Y = startRect.Y + 0.5 * startRect.Height };
        var spConv = await module.InvokeAsync<Point>("ConvertToSvg", new object[] { _svgRef, sp });
        return spConv;
    }
}
