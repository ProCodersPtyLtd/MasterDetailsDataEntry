@using Platz.ObjectBuilder.Blazor.Controllers
@namespace Platz.ObjectBuilder.Blazor
@inject IQueryController _queryController

    <div style="width: 100%">
        <p>
            <button class="btn btn-primary" type="button" data-toggle="collapse" data-target="#collapseExample" aria-expanded="false" aria-controls="collapseExample">
                Settings
            </button>
        </p>
        <div class="collapse" id="collapseExample">
            <div class="card card-body">
                Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident.
            </div>
        </div>
    </div>

    @*<div class="float-right">
            <button class="btn btn-light btn-sm" title="Add" @onclick="@(() => Click())">
                <span class="oi oi-fire"></span>
            </button>
        </div>*@

    <CascadingValue Value="@_queryController">
        <table style="width: 100%">
            <tr>
                <th style="width: auto"></th>
                <th style="width: 300px"></th>
            </tr>
            <tr>
                <td style="vertical-align: top">
                    <div>
                        <QuerySelectPanelComponent />
                    </div>
                    <div>
                        @*<QueryFromPanelComponent QueryController="_queryController" />*@
                        <QueryFromPanelComponent ModelChanged="ModelChanged" />
                    </div>
                    <div>
                        <QueryWherePanelComponent />
                    </div>
                </td>
                <td style="vertical-align: top">
                    <div style="vertical-align: top">
                        <QueryTableListComponent ModelChanged="ModelChanged" />
                    </div>
                </td>
            </tr>
        </table>
    </CascadingValue>

    @code {
        [Parameter]
        public Type DbContextType { get; set; }

        protected override void OnInitialized()
        {
            base.OnInitialized();

            InitController();
        }

        private void InitController()
        {
            if (DbContextType != null)
            {
                var p = new EntityFrameworkQueryControllerParameters { DbContextType = DbContextType };
                _queryController.SetParameters(p);
            }

            _queryController.LoadSchema();
        }

        private async Task ModelChanged(ChangeEventArgs args)
        {
            StateHasChanged();
        }

        private void Click()
        {
            StateHasChanged();
        }
    }
