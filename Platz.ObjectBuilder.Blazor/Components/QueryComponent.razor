@using Platz.ObjectBuilder.Blazor
@using Platz.ObjectBuilder.Blazor.Controllers
@using System.IO

@namespace Platz.ObjectBuilder

@inject IQueryController _queryController

<CascadingValue Value="@_queryController">

    <div style="vertical-align: top">
        <ul class="nav nav-tabs" role="tablist">
            @for (int i = 0; i < GetTabQueries().Count(); i++)
            {
                var index = i;
                <li class="nav-item">

                    <table>
                        <tr>
                            <td>
                                <a class="nav-link @GetQueryTabActive(index)" data-toggle="tab" href="#m1" @onclick="() => QueryTabClick(index)">@GetTabQueries()[index]</a>
                            </td>
                            <td>
                                <button class="btn btn-light btn-sm" title="Delete" @onclick="@(async (args) => await SubQueryDeleteClick(index))"
                                        hidden="@(index == 0 || index == GetTabQueries().Count()-1)">
                                    <span class="oi oi-x"></span>
                                </button>
                            </td>
                        </tr>
                    </table>

                </li>
            }
        </ul>
    </div>
    <div>
        <QuerySettingsComponent StoreDataPath="@_fullStoreDataPath" DataService="@DataService" Namespace="@Namespace" ModelChanged="ModelChanged" />
    </div>

    <table style="width: 100%">
        <tr>
            <th style="width: auto"></th>
            <th style="width: 300px"></th>
        </tr>
        <tr>
            <td style="vertical-align: top">
                <div>
                    <QuerySelectPanelComponent ModelChanged="ModelChanged" />
                </div>
                <div>
                    @*<QueryFromPanelComponent QueryController="_queryController" />*@
                    <QueryFromPanelComponent ModelChanged="ModelChanged" Height="300" />
                </div>
                <div>
                    <QueryWherePanelComponent ModelChanged="ModelChanged" />
                </div>
            </td>
            <td style="vertical-align: top">
                <div style="vertical-align: top">

                    <ul class="nav nav-tabs" role="tablist">
                        <li class="nav-item">
                            <a class="nav-link active" data-toggle="tab" href="#tables">Entities</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" data-toggle="tab" href="#joins">Relationships</a>
                        </li>
                    </ul>


                    @*<ul class="nav nav-tabs">
                            <li class="active"><a data-toggle="tab" href="#tables">Entities</a></li>
                            <li><a data-toggle="tab" href="#joins">Relationships</a></li>
                        </ul>*@

                    <div class="tab-content">
                        <div id="tables" class="container tab-pane active">
                            <QueryTableListComponent ModelChanged="ModelChanged" />
                        </div>
                        <div id="joins" class="container tab-pane fade">
                            <QueryJoinListComponent ModelChanged="ModelChanged" />
                        </div>
                    </div>


                </div>
            </td>
        </tr>
    </table>
</CascadingValue>

@code {
    [Parameter]
    public Type DbContextType { get; set; }

    [Parameter]
    public string SourceSchemaFile { get; set; }

    [Parameter]
    public string StoreDataPath { get; set; }

    [Parameter]
    public string Namespace { get; set; }

    [Parameter]
    public string DataService { get; set; }

    private string _fullStoreDataPath { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        InitController();
        _fullStoreDataPath = Path.Combine(Directory.GetCurrentDirectory(), StoreDataPath);
        _fullStoreDataPath = Path.GetFullPath(_fullStoreDataPath);
    }

    private void InitController()
    {
        if (DbContextType != null)
        {
            var p = new QueryControllerParameters { DbContextType = DbContextType };
            //_queryController.SetParameters(p);
            var cfg = new EntityFrameworkQueryControllerConfiguration(p);
            _queryController.Configure(cfg);
        }
        else if (SourceSchemaFile != null)
        {
            var fullPath = Path.Combine(Directory.GetCurrentDirectory(), SourceSchemaFile);
            var p = new QueryControllerParameters { SchemaFilename = fullPath };
            var cfg = new JsonSchemaQueryControllerConfiguration(p);
            _queryController.Configure(cfg);
            _queryController.StoreParameters.SetSchemaFileName(fullPath);
        }

        _queryController.LoadSchema();
    }

    private async Task ModelChanged(ChangeEventArgs args)
    {
        StateHasChanged();
    }

    private async Task SubQueryDeleteClick(int index)
    {
        _queryController.RemoveSubQuery(index);
        StateHasChanged();
    }

    private void Click()
    {
        StateHasChanged();
    }

    private string[] GetTabQueries()
    {
        var list = _queryController.SubQueryList.Select(q => q.Name).ToList();
        list.Add("+");
        return list.ToArray();
    }

    private string GetQueryTabActive(int index)
    {
        return index == _queryController.SelectedQueryIndex ? "active" : "";
    }

    private void QueryTabClick(int index)
    {
        if (index == _queryController.SubQueryList.Count)
        {
            _queryController.CreateSubQuery(index);
        }

        _queryController.SelectedQueryIndex = index;
        StateHasChanged();
    }

}
