@using Platz.ObjectBuilder.Blazor.Controllers
@using System.Text.Json
@using System.IO

@inject IJSRuntime JS

@implements IAsyncDisposable

@namespace Platz.ObjectBuilder

<br />
<table>
    <tr>
        <th style="width: 340px;">
        </th>
        <th style="width: 120px;">
        </th>
        <th style="width: 170px;">
        </th>
    </tr>
    <tr>
        <td style="vertical-align: bottom;">
            <label for="SchemaName">Schema name</label><br />
            <input name="SchemaName" value="@SchemaController.Schema.Name" class="form-control" @onchange="NameChanged" />
        </td>
        <td style="padding: 0px 0px 0px 10px;">
            <label title="Version can be changed by adding migrations">
                Version <span class="oi oi-info"></span>
            </label>
            <input value="@SchemaController.Schema.Version" class="form-control" readonly="readonly" @onchange="NameChanged" />
        </td>
        <td style="padding: 0px 0px 0px 10px; vertical-align: bottom;">
            <button class="btn btn-primary" type="button" @onclick="SaveClick" style="width: 100%">Save</button>
        </td>

    </tr>
    <tr>
        <td>
            <br />
            <div class="form-check">
                <input class="form-check-input" type="radio" name="flexRadioDefault" id="flexRadioDefault1" checked="@SchemaController.Schema.UseIntId" @onchange="IntIdClicked">
                <label class="form-check-label" for="flexRadioDefault1">
                    Use INT autoincrement Id
                </label>
            </div>
            <div class="form-check">
                <input class="form-check-input" type="radio" name="flexRadioDefault" id="flexRadioDefault2" checked="@(!SchemaController.Schema.UseIntId)" @onchange="GuidIdClicked">
                <label class="form-check-label" for="flexRadioDefault2">
                    Use GUID Id
                </label>
            </div>
        </td>
    </tr>
    <tr>
        <td colspan="3">
            <br />
            <label>Path</label><br />
            <input @bind="SchemaController.FullStoreDataPath" readonly="readonly" class="form-control" />
        </td>
    </tr>
    <tr>
        <td>
        </td>
        <td style="padding: 10px 0px 0px 10px; vertical-align: bottom;">
            <button class="btn btn-secondary" type="button" @onclick="NewClick" style="width: 100%">New</button>
        </td>
        <td style="padding: 10px 0px 0px 10px; vertical-align: bottom;">
            <button class="btn btn-secondary" type="button" data-toggle="modal" data-target="#loadModal" @onclick="LoadClick" style="width: 100%">Load...</button>
        </td>
    </tr>
    <tr>
        <td>
            <br />
            <label>Namespace</label><br />
            <input @bind="SchemaController.Parameters.Namespace" readonly="readonly" class="form-control" style="width: 320px;" />
        </td>
        <td colspan="2">
            <br />
            <label>Data Context Name</label><br />
            <input @bind="SchemaController.Schema.DataContextName" readonly="readonly" class="form-control" />
        </td>
    </tr>
    <tr>
        <td colspan="3">
            <br />
            <label>Development Database - Target Connection String</label>
            <input @bind="SchemaController.Parameters.ConnectionString" readonly="readonly" class="form-control" />
        </td>
        
    </tr>
    <tr>
        <td>
        </td>
        <td style="padding: 10px 0px 0px 10px; vertical-align: bottom;">
            <button class="btn btn-danger" type="button" @onclick="DeleteSchemaClick" style="width: 100%">Clear</button>
        </td>
        <td style="padding: 10px 0px 0px 10px; vertical-align: bottom;">
            <button class="btn btn-warning" type="button" @onclick="ApplySchemaChangesClick" style="width: 100%">Apply Changes</button>
        </td>
    </tr>
    <tr>
        <td colspan="3">
            <br />

            <table class="table">
                <thead class="thead-light">
                    <tr>
                        <th scope="col" style="width: 120px;">Migration</th>
                        <th scope="col" style="width: 150px;">Created</th>
                        <th scope="col" style="width: 100px;">Status</th>
                        <th scope="col" style="width: 50px;"></th>
                    </tr>
                </thead>
                    @{ var mi = 0; }
                    @foreach (var m in SchemaController.SchemaMigrations.Migrations)
                    {
                        var mindex = mi;

                        <tr>
                            <td>@m.VersionText</td>
                            <td>@m.Migration?.Created</td>
                            <td>@m.StatusText</td>
                            <td>
                                <button class="btn btn-light btn-sm" title="View" data-toggle="modal" data-target="#migrationsModal" 
                                        @onclick="async (args) => await MigrationDetailsClick(args, mindex)">
                                    <span class="oi oi-eye"></span>
                                </button>

                                @if (m.IsDeleteEnabled)
                                {
                                    <button class="btn btn-light btn-sm" title="Delete" @onclick="async (args) => await DeleteMigrationClick(args, mindex)">
                                        <span class="oi oi-trash"></span>
                                    </button>
                                }
                            </td>
                        </tr>

                        mi++;
                    }
            </table>

        </td>
    </tr>
    <tr>
        <td>
            <button class="btn btn-danger" type="button" @onclick="MergeAllMigrationsClick" >Merge All Migrations</button>
        </td>
        <td style="padding: 0px 0px 0px 10px; vertical-align: bottom;">
            <button class="btn btn-warning" type="button" @onclick="CreateMinorMigrationClick" style="width: 100%">Add Minor</button>
        </td>
        <td colspan="1" style="padding: 0px 0px 0px 10px; vertical-align: bottom;">
            <button class="btn btn-warning" type="button" @onclick="CreateMigrationClick" style="width: 100%">Create Major</button>
        </td>
    </tr>
</table>

<div class="modal fade" id="loadModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Load schema</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="form-group">
                        <label for="recipient-name" class="col-form-label">Path:</label>
                        <input readonly="readonly" @bind="FullStoreDataPath" style="width: 100%" />
                    </div>
                    <div class="form-group">
                        <label for="message-text" class="col-form-label">Files:</label>
                        @{
                            var data = GetLoadFiles();
                        }

                        <div class="list-group overflow-auto" id="list-tab" role="tablist" style="max-height: 400px;">
                            @for (int i = 0; i < data.Count; i++)
                            {
                                var rowIndex = i;

                                <a class="list-group-item list-group-item-action" @onclick="() => FileClick(rowIndex)" @ondblclick="async(a) => await FileDblClick(a, rowIndex)"
                                   data-toggle="list" href="#list-home" role="tab" aria-controls="home">@data[i]</a>
                            }
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" data-dismiss="modal" @onclick="LoadFile">Load</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="migrationsModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">@_migrationVersion Migration Commands</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="form-group">
                        <textarea id="exampleFormControlTextarea1" rows="20" readonly="readonly" style="width: 100%" value="@_migrationData" />
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Position it -->
<div style="position: absolute; top: 0; right: 0; min-width: 300px;z-index: 100">

    <!-- Then put toasts within -->
    <div id="successToast" class="toast" role="banner" aria-live="assertive" aria-atomic="true" data-autohide="true" data-delay="3000" style="background-color: lightgreen;">
        <div class="toast-header">
            @*<img src="file" class="rounded mr-2" alt="...">*@
            @*<span class="oi oi-file"></span>*@
            <strong class="mr-auto">Information</strong>
            <small class="text-muted">just now</small>
            <button type="button" class="ml-2 mb-1 close" data-dismiss="toast" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
        <div class="toast-body">@_toastMessage</div>
    </div>
</div>

<!-- Position it -->
<div style="position: absolute; top: 0; right: 0; min-width: 300px;z-index: 100">

    <!-- Then put toasts within -->
    <div id="errorToast" class="toast" role="banner" aria-live="assertive" aria-atomic="true" data-autohide="true" data-delay="30000" style="background-color: lightcoral;">
        <div class="toast-header">
            @*<img src="file" class="rounded mr-2" alt="...">*@
            @*<span class="oi oi-file"></span>*@
            <strong class="mr-auto">Error</strong>
            <small class="text-muted">just now</small>
            <button type="button" class="ml-2 mb-1 close" data-dismiss="toast" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
        <div class="toast-body">@_toastErrorMessage</div>
    </div>
</div>

@code {
    [CascadingParameter]
    public ISchemaController SchemaController { get; set; }

    [Parameter]
    public string FullStoreDataPath { get; set; }

    [Parameter]
    public EventCallback<ChangeEventArgs> ModelChanged { get; set; }

    private string _selectedFileName;
    private List<string> _files;
    private bool _fileNameChanged;
    private string _fileNameSaved;
    private string _toastMessage;
    private string _toastErrorMessage;
    private string _migrationVersion;
    private string _migrationData;

    private Task<IJSObjectReference> _module;
    private Task<IJSObjectReference> Module => _module ??= JS.InvokeAsync<IJSObjectReference>("import", "./_content/Platz.ObjectBuilder.Blazor/objectBuilder.js").AsTask();

    public async ValueTask DisposeAsync()
    {
        if (_module != null)
        {
            var module = await _module;
            await module.DisposeAsync();
        }
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        SchemaController.FullStoreDataPath = FullStoreDataPath;
    }

    private async Task NameChanged(ChangeEventArgs args)
    {
        SchemaController.UpdateLog(DesignOperation.SetSchemaName, null, null, (string)args.Value);
        SchemaController.Schema.Name = (string)args.Value;
        SchemaController.Schema.Changed = true;
        _fileNameChanged = true;
        await ModelChanged.InvokeAsync(null);
    }

    private async Task IntIdClicked(ChangeEventArgs args)
    {
        SchemaController.Schema.UseIntId = "on" == (string)args.Value;
        await ModelChanged.InvokeAsync(null);
    }

    private async Task GuidIdClicked(ChangeEventArgs args)
    {
        SchemaController.Schema.UseIntId = !("on" == (string)args.Value);
        await ModelChanged.InvokeAsync(null);
    }

    private async Task NewClick(MouseEventArgs args)
    {
        SchemaController.NewSchema();
        await ModelChanged.InvokeAsync(null);
        var module = await Module;
        _toastMessage = $"New schema created.";
        await module.InvokeVoidAsync("ShowToast", new object[] { "#successToast" });
    }

    private async Task SaveClick(MouseEventArgs args)
    {
        var module = await Module;

        ValidateClick(null);

        if (SchemaController.ValidationResults.Any())
        {
            _toastErrorMessage = SchemaController.Errors;
            await module.InvokeVoidAsync("ShowToast", new object[] { "#errorToast" });
            return;
        }

        bool canSave = true;
        var fileName = SchemaController.GenerateFileName(FullStoreDataPath);
        fileName = Path.GetFileName(fileName);

        if (_fileNameChanged && SchemaController.FileExists(FullStoreDataPath))
        {
            canSave = await JS.InvokeAsync<bool>("confirm", $"File '{fileName}' already exists. Are you sure you want to overwrite it?");
        }

        if (canSave)
        {
            SchemaController.SaveMigrations(FullStoreDataPath);
            SchemaController.SaveSchema(FullStoreDataPath);
            _fileNameSaved = fileName;
            _fileNameChanged = false;
            _toastMessage = $"File  '{_fileNameSaved}' saved successfully.";
            await module.InvokeVoidAsync("ShowToast", new object[] { "#successToast" });
        }

        await ModelChanged.InvokeAsync(null);
    }

    private void ValidateClick(MouseEventArgs args)
    {
        SchemaController.Validate();
        ShowErrors();
        StateHasChanged();
    }

    private void ShowErrors()
    {
        if (SchemaController.ValidationResults.Any())
        {
            foreach (var r in SchemaController.ValidationResults)
            {
                SchemaController.Errors += r.Message + "\r\n";
            }
        }
        else
        {
            SchemaController.Errors += "Validation result: pass" + "\r\n";
        }
    }

    private List<string> GetLoadFiles()
    {
        var result = SchemaController.GetFileList(FullStoreDataPath);
        _files = result;
        return result;
    }

    private async Task LoadClick(MouseEventArgs args)
    { }

    private async Task MergeAllMigrationsClick(MouseEventArgs args)
    {

    }
    private async Task CreateMigrationClick(MouseEventArgs args)
    {
        string message;

        if (!SchemaController.TryAddMigration(true, out message))
        {
            _toastErrorMessage = message;
            var module = await Module;
            await module.InvokeVoidAsync("ShowToast", new object[] { "#errorToast" });
        }
    }

    private async Task CreateMinorMigrationClick(MouseEventArgs args)
    {
        string message;

        if (!SchemaController.TryAddMigration(false, out message))
        {
            _toastErrorMessage = message;
            var module = await Module;
            await module.InvokeVoidAsync("ShowToast", new object[] { "#errorToast" });
        }
    }

    private async Task MigrationDetailsClick(MouseEventArgs args, int row)
    {
        var package = SchemaController.GetCurrentMigrations();
        var m = package.Migrations[row];
        _migrationVersion = m.VersionText;
        //var migrations = SchemaController.GetCurrentMigrations();
        //var commands = migrations.Migrations[row].Commands;
        //var sb = new System.Text.StringBuilder();

        //foreach (var c in commands)
        //{
        //    sb.AppendLine($"{c.OperationCode}");
        //}

        //_migrationData = sb.ToString();
        _migrationData = SchemaController.MigrationToString(m.Migration);
    }

    private async Task DeleteMigrationClick(MouseEventArgs args, int row)
    {

    }

    private async Task DeleteSchemaClick(MouseEventArgs args)
    {
        var module = await Module;

        if (SchemaController.Schema.Changed)
        {
            _toastErrorMessage = $"Schema must be saved first.";
            await module.InvokeVoidAsync("ShowToast", new object[] { "#errorToast" });
            return;
        }

        var canDrop = await JS.InvokeAsync<bool>("confirm", $"All schema tables and data will be lost. Are you sure you want to drop schema {SchemaController.Schema.Name}?");

        if (!canDrop)
        {
            return;
        }

        try
        {
            SchemaController.DropSchemaWithObjects(SchemaController.Schema.Name);
        }
        catch (Exception exc)
        {
            _toastErrorMessage = exc.Message + " Cannot drop schema with objects, try to delete the database. All data will be lost!";
            await module.InvokeVoidAsync("ShowToast", new object[] { "#errorToast" });
            return;
        }

        _toastMessage = $"Schema {SchemaController.Schema.Name} dropped successfully.";
        await module.InvokeVoidAsync("ShowToast", new object[] { "#successToast" });
    }

    private async Task ApplySchemaChangesClick(MouseEventArgs args)
    {
        var module = await Module;

        if (SchemaController.Schema.Changed)
        {
            _toastErrorMessage = $"Schema must be saved before applying.";
            await module.InvokeVoidAsync("ShowToast", new object[] { "#errorToast" });
            return;
        }

        try
        {
            SchemaController.ApplyMigrations();
        }
        catch(Exception exc)
        {
            _toastErrorMessage = exc.Message + " Try to Clear Schema first. All data will be deleted!";
            await module.InvokeVoidAsync("ShowToast", new object[] { "#errorToast" });
            return;
        }

        _toastMessage = $"Migrations applied successfully.";
        await module.InvokeVoidAsync("ShowToast", new object[] { "#successToast" });
    }

    private async Task FileDblClick(MouseEventArgs args, int row)
    {
        var module = await Module;

        _selectedFileName = _files[row];
        await module.InvokeVoidAsync("HideModal", new object[] { "#loadModal" });
        await LoadFile(args);
    }

    private void FileClick(int row)
    {
        _selectedFileName = _files[row];
    }

    private async Task LoadFile(MouseEventArgs args)
    {
        if (!string.IsNullOrWhiteSpace(_selectedFileName))
        {
            SchemaController.LoadFromFile(FullStoreDataPath, _selectedFileName);
            SchemaController.LoadMigrations(FullStoreDataPath);
            await ModelChanged.InvokeAsync(null);
            _fileNameChanged = false;
        }
    }
}
