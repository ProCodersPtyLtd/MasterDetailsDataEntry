@using Microsoft.JSInterop

@inject IJSRuntime JsRuntime
@inject IDataEntryProvider _dataEntryProvider

@namespace Platz.SqlForms

<div class="DetailsFormControl">
    @*MasterControl*@
    <RepeaterDataControl Form="@_form" ModelType="@MasterModelType" ModelItems="@MasterModelItems" Fields="@MasterFields" ModelValueChanged="@ModelChanged"
                         ItemsChanged="@ItemsChanged" ButtonClicked="@ButtonClicked" ViewOptions="@GetMasterViewOptions()" />
    @*DetailsControl*@
    <RepeaterDataControl Form="@_form" ModelType="@ModelType" ModelItems="@ModelItems" Fields="@Fields" ModelValueChanged="@ModelChanged"
                         ItemsChanged="@ItemsChanged" ButtonClicked="@ButtonClicked" ViewOptions="@GetDetailsViewOptions()" />
</div>

@code
{
    [Parameter]
    public Type FormType { get; set; }

    [Parameter]
    public int? FilterValue { get; set; }

    [Parameter]
    public bool EditingNow { get; set; }

    [Parameter]
    public EventCallback<ItemButtonClickedArgs> ItemButtonClicked { get; set; }

    public IEnumerable<DataField> MasterFields { get; set; }
    public IEnumerable<DataField> Fields { get; set; }

    public System.Collections.IList MasterModelItems { get; set; }
    public System.Collections.IList ModelItems { get; set; }

    public Type MasterModelType { get; set; }
    public Type ModelType { get; set; }

    private IModelDefinitionForm _form;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        LoadForm();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        LoadForm();
    }

    private void LoadForm()
    {
        _form = Activator.CreateInstance(FormType) as IModelDefinitionForm;
        MasterModelType = _form.GetMasterType();
        ModelType = _form.GetDetailsType();

        MasterFields = _dataEntryProvider.GetFormFields(_form, MasterModelType);
        Fields = _dataEntryProvider.GetFormFields(_form, ModelType);

        MasterModelItems = _dataEntryProvider.GetFilteredModelData(_form, FilterValue, MasterModelType);
        ModelItems = _dataEntryProvider.GetFilteredModelData(_form, FilterValue, ModelType);
    }

    private FormViewOptions GetMasterViewOptions()
    {
        var result = new FormViewOptions { AllowEdit = true, StartNewEdititng = EditingNow };
        return result;
    }

    private FormViewOptions GetDetailsViewOptions()
    {
        var result = new FormViewOptions { AllowEdit = true, AllowAdd = true, AllowDelete = true };
        return result;
    }

    private async Task ButtonClicked(ButtonClickedArgs args)
    {
        var items = args.Entity == MasterModelType ? MasterModelItems : ModelItems;

        var returnArgs = new ItemButtonClickedArgs
        {
            Item = items[args.RowIndex],
            Pk = items[args.RowIndex].GetPrimaryKeyValue(Fields),
            Button = args.Button,
            RowIndex = args.RowIndex,
            Entity = args.Entity
        };

        await ItemButtonClicked.InvokeAsync(returnArgs);
    }

    private async Task ModelChanged(ValueChangedArgs args)
    {

    }

    private async Task ItemsChanged(ItemsChangedArgs args)
    {
        var items = args.Entity == MasterModelType ? MasterModelItems : ModelItems;
        var item = items[args.RowIndex];
        var fields = args.Entity == MasterModelType ? MasterFields : Fields;
        var id = item.GetPrimaryKeyValue(fields);

        switch (args.Operation)
        {
            case ItemOperations.Add:

                // populate filter key only if it is not EditingNow master record
                if (args.Entity == MasterModelType && EditingNow)
                {
                    FilterValue = id;
                }
                else
                {
                    item.SetFilterKeyValue(fields, FilterValue);
                }

                item = _dataEntryProvider.InsertItem(_form, item);
                break;

            case ItemOperations.Update:

                item = _dataEntryProvider.UpdateItem(_form, item);
                break;

            case ItemOperations.Delete:

                // if (id > 0)
                {
                    bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");

                    if (!confirmed)
                    {
                        return;
                    }

                    _dataEntryProvider.DeleteItem(_form, item);

                }

                items.Remove(item);
                break;
        }
    }

}