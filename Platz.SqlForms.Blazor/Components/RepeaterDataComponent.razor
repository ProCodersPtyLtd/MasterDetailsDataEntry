@inject IComponentTypeResolver _componentResolverService
@inject IDataValidationProvider _dataValidationProvider
@inject RepeaterDataComponentController _controller

@namespace Platz.SqlForms.Blazor

<div class="RepeaterDataControl">
    <table mat-table>
        <tr class="jsgrid-grid-header">
            @foreach (var field in _controller.GetFields())
            {
                @if (field.Hidden)
                {
                    continue;
                }

                @if (field.Required)
                {
                    <th>@(field.Label)*</th>
                }
                else
                {
                    <th>@field.Label</th>
                }
            }

            <th style="text-align: left;">Action</th>
        </tr>

        @{
            @*@foreach (var item in ModelItems)*@
            @for (int rowIndex = 0; rowIndex < ModelItems.Count; rowIndex++)
            {
                var row = rowIndex;

                <tr class="jsgrid-row-item">
                    @foreach (var field in _controller.GetFields())
                    {
                        @if (field.Hidden)
                        {
                            continue;
                        }

                        <td>
                            <SingleDataComponent Form="@Form" Field="@field" ExtraHeight="@GetExtraHeight(rowIndex)" State="@_controller.CreateFieldState(field, rowIndex)"
                                               IsEditing="@(GetRowState(rowIndex).IsEditing)" ModelValueChanged="@LocalModelValueChanged" />
                        </td>
                    }

                    <td width="200px"  @onmouseover="@(e => RowMouseOver(e, row))" @onmouseout="@(e => RowMouseOut(e, row))">

                        

                        <button class="btn btn-light" title="Edit" @onclick="@((args) => EditClick(args, row))" disabled="@_controller.IsEditing"
                                hidden="@(!GetRowState(rowIndex).IsMouseOver || (GetRowState(rowIndex).IsEditing || (ViewOptions?.AllowEdit == false)))" >
                            <span class="oi oi-pencil"></span>
                        </button>

                        <button class="btn btn-light" titel="Delete" @onclick="@(async (args) => await DeleteClick(args, row))"
                                hidden="@(!GetRowState(rowIndex).IsMouseOver || GetRowState(rowIndex).IsEditing || (ViewOptions?.AllowDelete == false))" disabled="@_controller.IsEditing">
                            <span class="oi oi-delete"></span>&nbsp;
                        </button>

                        <div style="vertical-align: top; width: 167px; height:@(GetExtraHeight(rowIndex) ? 61: 41)px;" hidden="@(!GetRowState(rowIndex).IsEditing)">
                            <button class="btn btn-light" title="Apply" @onclick="@((args) => ApplyClick(args, row))" hidden="@(!GetRowState(rowIndex).IsEditing)">
                                <span class="oi oi-check"></span>
                            </button>

                            <button class="btn btn-light" title="Cancel" @onclick="@((args) => CancelClick(args, row))" hidden="@(!GetRowState(rowIndex).IsEditing)">
                                <span class="oi oi-action-undo"></span>
                            </button>
                        </div>

                        @foreach (var field in _controller.GetButtonFields()) 
                        { 
                            <button class="btn btn-light" title="@field.Label" @onclick="@(async (args) => await CustomButtonClick(args, field.BindingProperty, row))" 
                                    hidden="@(!GetRowState(rowIndex).IsMouseOver || (GetRowState(rowIndex).IsEditing || (ViewOptions?.AllowEdit == false)))" 
                                    disabled="@_controller.IsEditing" >
                                @field.BindingProperty
                            </button>
                        }
                    </td>
                </tr>
            }
        }

    </table>
    <div hidden="@(!ViewOptions?.AllowAdd == true)">
        <button class="btn btn-primary" @onclick="@((args) => AddClick(args))" disabled="@_controller.IsEditing">Add</button>
    </div>

    <textarea hidden="@(_controller.Error == null ? "hidden" : null)" readonly="readonly" class="form-control" style="background-color: black; color: red;" rows="3">Error: @_controller.Error</textarea>
</div>

@code
{
    [Parameter]
    public IModelDefinitionForm Form { get; set; }

    [Parameter]
    public FormViewOptions ViewOptions { get; set; } = new FormViewOptions { AllowAdd = true, AllowDelete = true, AllowEdit = true };

    [Parameter]
    public Type ModelType { get; set; }

    [Parameter]
    public IEnumerable<DataField> Fields { get; set; }

    [Parameter]
    public System.Collections.IList ModelItems { get; set; }

    [Parameter]
    public EventCallback<ValueChangedArgs> ModelValueChanged { get; set; }

    [Parameter]
    public EventCallback<ItemsChangedArgs> ItemsChanged { get; set; }

    [Parameter]
    public EventCallback<ButtonClickedArgs> ButtonClicked { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _controller.SetParameters(Form, ViewOptions, ModelType, Fields, ModelItems);
        _controller.InitControl();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        _controller.SetParameters(Form, ViewOptions, ModelType, Fields, ModelItems);
    }

    private bool GetExtraHeight(int rowIndex)
    {
        return _controller.GetExtraHeight(rowIndex);
    }

    private RowState GetRowState(int rowIndex)
    {
        return _controller.GetRowState(rowIndex);
    }

    #region events

    private void RowMouseOver(MouseEventArgs args, int rowIndex)
    {
        _controller.GetRowState(rowIndex).IsMouseOver = true;
    }

    private void RowMouseOut(MouseEventArgs args, int rowIndex)
    {
        if (ModelItems.Count > rowIndex)
        {
            _controller.GetRowState(rowIndex).IsMouseOver = false;
        }
    }

    private async Task LocalModelValueChanged(ValueChangedArgs args)
    {
        _controller.LocalModelValueChanged(args);
        await ModelValueChanged.InvokeAsync(args);
    }

    #endregion

    #region clicks

    private async Task CustomButtonClick(MouseEventArgs e, string button, int rowIndex)
    {
        await ButtonClicked.InvokeAsync(new ButtonClickedArgs { Entity = ModelType, Button = button, RowIndex = rowIndex });
    }

    private void EditClick(MouseEventArgs e, int rowIndex)
    {
        _controller.EditItem(rowIndex);
        StateHasChanged();
    }

    private async Task DeleteClick(MouseEventArgs e, int rowIndex)
    {
        await _controller.DeleteItem(rowIndex, ItemsChanged.InvokeAsync);
        StateHasChanged();
    }

    private async Task ApplyClick(MouseEventArgs e, int rowIndex)
    {
        await _controller.ApplyItem(rowIndex, ItemsChanged.InvokeAsync);
        StateHasChanged();
    }

    private void CancelClick(MouseEventArgs e, int rowIndex)
    {
        _controller.CancelItem(rowIndex);
    }

    private void AddClick(MouseEventArgs e)
    {
        _controller.AddNewItem();
    }

    #endregion

}