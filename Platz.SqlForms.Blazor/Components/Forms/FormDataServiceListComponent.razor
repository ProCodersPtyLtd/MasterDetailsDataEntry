@using Microsoft.JSInterop

@typeparam TForm

@inject IJSRuntime JsRuntime
@inject IDataEntryProvider _dataEntryProvider

@namespace Platz.SqlForms

<div class="DataServiceListComponent">

    <table class="table table-striped">
        <thead class="thead-light">
            <tr>
                @foreach (var f in _fields)
                {
                    <th scope="col">@f.Label</th>
                }

                @if (_contextMenu.Any())
                {
                    <th>Actions</th>
                }
            </tr>
        </thead>
        <tbody>

            @*@foreach (var item in _modelItems)*@
            @for (int rowIndex = 0; rowIndex < _modelItems.Count; rowIndex++)
            {
                var row = rowIndex;

                <tr>
                    @foreach (var f in _fields)
                    {
                        <td>@GetItemValue(f, row)</td>
                    }

                    @if (_contextMenu.Any())
                    {
                        <td>
                            <div class="dropdown">
                                <button class="btn btn-light" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                    <span class="oi oi-ellipses"></span>
                                </button>
                                <div class="dropdown-menu dropdown-menu-right" aria-labelledby="dropdownMenuButton">
                                    @foreach (var link in _contextMenu)
                                    {
                                        <a class="dropdown-item" href="@GetLinkRoute(link, row)">@link.Text</a>
                                    }
                                </div>
                            </div>
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>

    <BottomButtonsComponent Form="_form" NavigateFormatParameters="GetNavigateFormatParameters()" ButtonActionClicked="ButtonActionClicked"
          Buttons="_form.GetButtons()" ButtonNavigations="_form.GetButtonNavigations()" ButtonClicked="ButtonClicked" />
</div>

@code
{
        //[Parameter]
        //public Type FormType { get; set; }

        [Parameter]
        public object[] ServiceParameters { get; set; }

        [Parameter]
        public EventCallback<ItemButtonClickedArgs> ItemButtonClicked { get; set; }

        [Parameter]
        public EventCallback<ButtonClickedArgs> ButtonClicked { get; set; }

    private DataServiceBase _form;
    private IEnumerable<DataField> _fields;
    private IEnumerable<ActionRouteLink> _contextMenu;
    private System.Collections.IList _modelItems { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        LoadForm();
    }

    private void LoadForm()
    {
        _form = Activator.CreateInstance<TForm>() as DataServiceBase;
        _fields = _form.GetDetailsFields().Where(f => f.Hidden == false);
        _modelItems = _form.ExecuteListQuery(ServiceParameters);
        _contextMenu = _form.GetContextLinks();
    }

    private object[] GetNavigateFormatParameters()
    {
        // index [0] is always reserved for id
        return 0.GetFormatParameters(ServiceParameters);
    }

    private string GetLinkRoute(ActionRouteLink link, int row)
    {
        // var id = _modelItems[row].GetPrimaryKeyValue(_fields);
        var keys = _modelItems[row].GetPrimaryAndFilterKeyValues(_fields);
        var result = string.Format(link.LinkText, keys);
        return result;
    }

    private object GetItemValue(DataField field, int row)
    {
        var item = _modelItems[row];
        var result = item.GetPropertyValue(field.BindingProperty);
        var format = _form.GetFieldFormat(field);

        if (format != null)
        {
            result = string.Format($"{{0:{format}}}", result);
        }

        return result;
    }

    private async Task<bool> ButtonActionClicked(ButtonActionArgs args)
    {
        StateHasChanged();
        return true;
    }
}