@using Microsoft.JSInterop
@using Platz.SqlForms.Blazor

@typeparam TForm

@inject IJSRuntime JsRuntime
@inject IDataEntryProvider _dataEntryProvider

@namespace Platz.SqlForms

<div class="DataServiceListComponent">

    <table class="table table-striped">
        <thead class="thead-light">
            <tr>
                @foreach (var f in _fields)
                {
                    <th scope="col" @onclick="@(async () => await ColClick(@f))">
                        <span>@f.Label</span>
                        <span class="@GetColSortIcon(@f)"></span>
                    </th>
                }

                @if (_contextMenu.Any())
                {
                    <th>Actions</th>
                }
            </tr>
        </thead>
        <tbody>

            @if (ShowFilter)
            {
                <tr style="background-color: cadetblue">

                @foreach (var f in _fields)
                {
                    @if (IsTextFilter(f))
                    {
                        <td>
                            <input class="form-control" value="@GetFilterValue(@f)" @onchange="@(async (a) => await FilterValueChanged(@f, a))" />
                        </td>
                    }
                    else
                    {
                        <td></td>
                    }
                }

                    <td>
                        <button class="btn btn-light" type="button" aria-haspopup="true" aria-expanded="false" @onclick="@(async () => await ClearFilters())">
                            <span class="oi oi-action-undo"></span>
                        </button>
                    </td>

                </tr>
            }

            @*@foreach (var item in _modelItems)*@
            @for (int rowIndex = 0; rowIndex < _modelItems.Count; rowIndex++)
            {
                var row = rowIndex;

                <tr>
                    @foreach (var f in _fields)
                    {
                        <td>@GetItemValue(f, row)</td>
                    }

                    @if (_contextMenu.Any())
                    {
                        <td>
                            <div class="dropdown">
                                <button class="btn btn-light" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                    <span class="oi oi-ellipses"></span>
                                </button>
                                <div class="dropdown-menu dropdown-menu-right" aria-labelledby="dropdownMenuButton">
                                    @foreach (var link in _contextMenu)
                                    {
                                        <a class="dropdown-item" href="@GetLinkRoute(link, row)">@link.Text</a>
                                    }
                                </div>
                            </div>
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>

    <BottomButtonsComponent Form="_form" NavigateFormatParameters="GetNavigateFormatParameters()" ButtonActionClicked="ButtonActionClicked"
                            Buttons="_form.GetButtons()" ButtonNavigations="_form.GetButtonNavigations()" ButtonClicked="ButtonClicked" />
</div>

@code
{
    //[Parameter]
    //public Type FormType { get; set; }

    [Parameter]
    public object[] ServiceParameters { get; set; }

    [Parameter]
    public bool? AllowSort { get; set; }

    [Parameter]
    public bool ShowFilter { get; set; }

    [Parameter]
    public EventCallback<ItemButtonClickedArgs> ItemButtonClicked { get; set; }

    [Parameter]
    public EventCallback<ButtonClickedArgs> ButtonClicked { get; set; }

    private DataServiceBase _form;
    private IEnumerable<DataField> _fields;
    private IEnumerable<ActionRouteLink> _contextMenu;
    private System.Collections.IList _modelItems { get; set; }
    private string _sortColumn;
    private bool _isDescSort;
    private Dictionary<string, string> _filters = new Dictionary<string, string>();

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        LoadForm();
    }

    private void LoadForm()
    {
        _form = Activator.CreateInstance<TForm>() as DataServiceBase;
        _fields = _form.GetDetailsFields().Where(f => f.Hidden == false);

        var options = GetQueryOptions();
        _modelItems = _form.ExecuteListQuery(options, ServiceParameters);
        _contextMenu = _form.GetContextLinks();
    }

    private QueryOptions GetQueryOptions()
    {
        var result = new QueryOptions()
        {
            SortColumn = _sortColumn,
            SortDirection = _isDescSort ? SortDirection.Desc: SortDirection.Asc,

            Filters = _filters.Select(f => new FieldFilter 
            { 
                BindingProperty = f.Key, 
                FilterType = _fields.First(x => ((DataField)x).BindingProperty == f.Key).FilterType, 
                Filter = f.Value  
            }).ToList()
        };

        return result;
    }

    private object[] GetNavigateFormatParameters()
    {
        // index [0] is always reserved for id
        return 0.GetFormatParameters(ServiceParameters);
    }

    private string GetLinkRoute(ActionRouteLink link, int row)
    {
        // var id = _modelItems[row].GetPrimaryKeyValue(_fields);
        var allFields = _form.GetDetailsFields();
        var keys = _modelItems[row].GetPrimaryAndFilterKeyValues(allFields);
        //var result = string.Format(link.LinkText, keys);
        var result = NaviLinkHelper.GetLink(link.LinkText, keys);
        return result;
    }

    private object GetItemValue(DataField field, int row)
    {
        var item = _modelItems[row];
        var result = item.GetPropertyValue(field.BindingProperty);
        var format = _form.GetFieldFormat(field);

        if (format != null)
        {
            result = string.Format($"{{0:{format}}}", result);
        }

        return result;
    }

    private async Task<bool> ButtonActionClicked(ButtonActionArgs args)
    {
        StateHasChanged();
        return true;
    }

    private async Task ColClick(Field col)
    {
        if (AllowSort != false)
        {
            await Sort(col);
        }
    }

    private async Task Sort(Field col)
    {
        var field = col as DataField;

        if (_sortColumn == null)
        {
        }

        if (field.BindingProperty == _sortColumn)
        {
            _isDescSort = !_isDescSort;
        }
        else
        {
            _isDescSort = false;
        }

        _sortColumn = field.BindingProperty;
        LoadForm();
    }

    private string GetColSortIcon(Field col)
    {
        var field = col as DataField;

        if (field.BindingProperty == _sortColumn)
        {
            return _isDescSort ? "oi oi-sort-descending" : "oi oi-sort-ascending";
        }

        return "";
    }

    private bool IsTextFilter(Field col)
    {
        var field = col as DataField;
        return field.FilterType == FieldFilterType.TextContains || field.FilterType == FieldFilterType.TextStarts || field.FilterType == FieldFilterType.TextEnds;
    }

    private string GetFilterValue(Field col)
    {
        var field = col as DataField;

        if (_filters.ContainsKey(field.BindingProperty))
        {
            return _filters[field.BindingProperty];
        }

        return "";
    }

    private async Task FilterValueChanged(Field col, ChangeEventArgs a)
    {
        var field = col as DataField;
        _filters[field.BindingProperty] = a.Value.ToString();
        //StateHasChanged();
        LoadForm();
    }

    private async Task ClearFilters()
    {
        _filters.Clear();
        LoadForm();
    }
}