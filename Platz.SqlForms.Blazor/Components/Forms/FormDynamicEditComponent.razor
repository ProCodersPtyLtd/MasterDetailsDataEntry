@inject IComponentTypeResolver _componentResolverService
@inject IDataValidationProvider _dataValidationProvider
@inject DynamicEditController _controller
@inject NavigationManager _navi

@typeparam TForm

@namespace Platz.SqlForms

<div class="FormDynamicEditComponent">
    <div class="container">
        @foreach (var field in _controller.GetFields())
        {
            @if (field.Hidden)
            {
                continue;
            }

            <div class="row">

                <div class="col-md-4">
                    @if (field.Required)
                    {
                        <label>@(field.Label)*</label>
                    }
                    else
                    {
                        <lable>@field.Label</lable>
                    }
                </div>

                <div class="col-md-8">
                    <SingleDataComponent Form="@_form" Field="@field" ExtraHeight="@true" State="@_controller.GetFieldState(field)"
                                         IsEditing="@true" ModelValueChanged="@LocalModelValueChanged" />
                </div>
            </div>
        }

        <div class="row">
            <div class="col-md-2"></div>

            <div class="col-md-10">
                @foreach (var btn in _controller.Buttons)
                {
                    @:&nbsp;
                    <button class="@GetButtonClass(btn)" title="@btn.Hint" @onclick="@(async (args) => await ButtonClick(args, btn))">@GetButtonText(btn)</button>
                }
            </div>
        </div>

        <div class="row">
            <div class="col-md-12">
                <textarea hidden="@(_controller.Error == null ? "hidden" : null)" readonly="readonly" class="form-control" style="background-color: black; color: red;" rows="3">Error: @_controller.Error</textarea>
            </div>
        </div>

    </div>
</div>



@code
{

    //[Parameter]
    //public FormViewOptions ViewOptions { get; set; } = new FormViewOptions { AllowAdd = true, AllowDelete = true, AllowEdit = true };

    //[Parameter]
    //public Type ModelType { get; set; }

    //[Parameter]
    //public IEnumerable<DataField> Fields { get; set; }

    [Parameter]
    public int Id { get; set; }

    [Parameter]
    public EventCallback<ValueChangedArgs> ModelValueChanged { get; set; }

    [Parameter]
    public EventCallback<ItemsChangedArgs> ItemsChanged { get; set; }

    [Parameter]
    public EventCallback<ButtonClickedArgs> ButtonClicked { get; set; }

    private object _modelItem { get; set; }
    private IDynamicEditForm _form;
    //private IEnumerable<DataField> _fields;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        //_controller.SetParameters(Form, ViewOptions, ModelType, Fields, ModelItems);
        //_controller.InitControl();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        LoadForm();
        //_controller.SetParameters(Form, ViewOptions, ModelType, Fields, ModelItems);
    }

    private void LoadForm()
    {
        _form = Activator.CreateInstance<TForm>() as IDynamicEditForm;
        // _fields = _form.GetFields().Where(f => f.Hidden == false);
        _controller.SetParameters(_form, Id);
        //_fields = _controller.GetFields();
        //_modelItem = _controller.GetItem();
        //_modelItems = _form.ExecuteListQuery(ServiceParameters);
    }

    private string GetButtonClass(DialogButtonDetails btn)
    {
        switch (btn.Action)
        {
            case ButtonActionTypes.Submit:
                return "btn btn-primary";
            case ButtonActionTypes.Cancel:
                return "btn btn-danger";
            default:
                return "btn btn-secondary";
        }
    }

    private string GetButtonText(DialogButtonDetails btn)
    {
        var result = btn.Text ?? Enum.GetName(typeof(ButtonActionTypes), btn.Action);
        return result;
    }

    #region events

    private async Task LocalModelValueChanged(ValueChangedArgs args)
    {
        _controller.LocalModelValueChanged(args);
        await ModelValueChanged.InvokeAsync(args);
    }

    #endregion

    #region clicks

    private async Task ButtonClick(MouseEventArgs e, DialogButtonDetails btn)
    {
        switch (btn.Action)
        {
            case ButtonActionTypes.Submit:
                break;
            case ButtonActionTypes.Validate:
                break;
            default:
                if (btn.LinkText != null)
                {
                    _navi.NavigateTo($"{btn.LinkText}");
                }
                else
                {
                    await ButtonClicked.InvokeAsync(new ButtonClickedArgs { Entity = _form.GetEntityType(), Button = GetButtonText(btn) });
                }
                break;
        }
    }

    private async Task SaveClick(MouseEventArgs e)
    {
    }

    private async Task CustomButtonClick(MouseEventArgs e, string button, int rowIndex)
    {
        await ButtonClicked.InvokeAsync(new ButtonClickedArgs { Entity = _form.GetEntityType(), Button = button, RowIndex = rowIndex });
    }

    private void EditClick(MouseEventArgs e, int rowIndex)
    {
        //_controller.EditItem(rowIndex);
        StateHasChanged();
    }

    private async Task DeleteClick(MouseEventArgs e, int rowIndex)
    {
        //await _controller.DeleteItem(rowIndex, ItemsChanged.InvokeAsync);
        StateHasChanged();
    }

    private async Task ApplyClick(MouseEventArgs e, int rowIndex)
    {
        //await _controller.ApplyItem(rowIndex, ItemsChanged.InvokeAsync);
        StateHasChanged();
    }

    private void CancelClick(MouseEventArgs e, int rowIndex)
    {
        //_controller.CancelItem(rowIndex);
    }

    private void AddClick(MouseEventArgs e)
    {
        //_controller.AddNewItem();
    }

    #endregion

}