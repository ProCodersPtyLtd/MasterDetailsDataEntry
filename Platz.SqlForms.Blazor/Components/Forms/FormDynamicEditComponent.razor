@using Microsoft.JSInterop
@using Platz.SqlForms.Blazor

@inject IComponentTypeResolver _componentResolverService
@inject IDataValidationProvider _dataValidationProvider
@inject DynamicEditController _controller
@inject NavigationManager _navi
@inject IJSRuntime JS

@typeparam TForm

@namespace Platz.SqlForms

<div class="FormDynamicEditComponent">
    <div class="container">
        @foreach (var field in _controller.GetFields())
        {
            @if (field.Hidden)
            {
                continue;
            }

            <div class="row">

                <div class="col-md-4">
                    @if (field.Required)
                    {
                        <label>@(field.Label)*</label>
                    }
                    else
                    {
                        <lable>@field.Label</lable>
                    }
                </div>

                <div class="col-md-6">
                    <SingleFormDataComponent Form="@_form" Field="@field" State="@_controller.GetFieldState(field)"
                                             IsEditing="@AllowEdit()" ModelValueChanged="@LocalModelValueChanged" />
                </div>
            </div>
        }

        <div class="row">
            <div class="col-md-12">
                <textarea hidden="@(_controller.Error == null ? "hidden" : null)" readonly="readonly" class="form-control" style="background-color: black; color: red;" rows="3">Error: @_controller.Error</textarea>
            </div>
        </div>

        <hr />

        <div class="row">

            <div class="col-md-2"></div>

            <div class="col-md-10">

                <BottomButtonsComponent Form="_form" ButtonActionClicked="ButtonActionClicked" NavigateFormatParameters="_controller.NavigateFormatParameters"
                                        ModelValueChanged="LocalModelValueChanged" ForDelete="ForDelete" Buttons="_controller.Buttons"
                                        ButtonNavigations="_controller.ButtonNavigations" ButtonClicked="ButtonClicked" />

            </div>
        </div>

    </div>
</div>

<br />

@code
{

    [Parameter]
    public int Id { get; set; }

    [Parameter]
    public object[] ServiceParameters { get; set; }

    // if FormParameters specified then Id and ServiceParameters ignored
    [Parameter]
    public object[] FormParameters { get; set; }

    [Parameter]
    public bool ReadOnly { get; set; }

    [Parameter]
    public bool ForDelete { get; set; }

    [Parameter]
    public EventCallback<ValueChangedArgs> ModelValueChanged { get; set; }

    [Parameter]
    public EventCallback<ButtonClickedArgs> ButtonClicked { get; set; }

    private object _modelItem { get; set; }
    private IDynamicEditForm _form;

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        LoadForm();
    }

    private void LoadForm()
    {
        _form = Activator.CreateInstance<TForm>() as IDynamicEditForm;

        if (_form == null)
        {
            throw new SqlFormException($"Cannot create IDynamicEditForm of type '{typeof(TForm).FullName}'");
        }

        var id = GetId();
        var parameters = GetParameters();
        _controller.SetParameters(_form, id, parameters, ControllerDataChanged);
    }

    private int GetId()
    {
        if (FormParameters != null && FormParameters.Any())
        {
            return (int)FormParameters[0];
        }

        return Id;
    }

    private object[] GetParameters()
    {
        if (FormParameters != null && FormParameters.Any())
        {
            return FormParameters.Skip(1).ToArray();
        }

        return ServiceParameters;
    }

    private bool AllowEdit()
    {
        if (ForDelete)
        {
            return false;
        }

        return !ReadOnly;
    }

    private async Task ControllerDataChanged()
    {
        StateHasChanged();
    }

    private async Task<bool> ButtonActionClicked(ButtonActionArgs args)
    {
        switch (args.ActionType)
        {
            case ButtonActionTypes.Submit:
                var result = await _controller.Submit();
                StateHasChanged();
                return result;
            case ButtonActionTypes.Validate:
                await _controller.Validate();
                StateHasChanged();
                return true;
            case ButtonActionTypes.Delete:
                return await _controller.Delete();
        }

        return true;
    }

    #region events

    private async Task LocalModelValueChanged(ValueChangedArgs args)
    {
        if (args != null)
        {
            _controller.LocalModelValueChanged(args);
            await ModelValueChanged.InvokeAsync(args);
        }

        StateHasChanged();
    }

    #endregion

}