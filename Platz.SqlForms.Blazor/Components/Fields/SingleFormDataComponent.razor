@inject IComponentTypeResolver _componentResolverService

@namespace Platz.SqlForms.Blazor

<div class="SingleFormDataComponent" style="vertical-align: top; width: auto; height: auto; min-height: 41px">
    @{

        var component = IsEditingControl() // IsEditing && ((Field.ReadOnly == null || Field.ReadOnly == false) && Field.PrimaryKey && State.IsNew)
            ? _componentResolverService.GetComponentTypeByName(Field.ControlType?.FullName)
            : _componentResolverService.GetComponentTypeByName(Field.ViewModeControlType?.FullName);

        RenderFragment renderFragment = (builder) =>
        {
            builder.OpenComponent(0, component);

            if (component.DefinesComponentParameter("Form", typeof(ParameterAttribute)))
            {
                builder.AddAttribute(0, "Form", Form);
            }

            builder.AddAttribute(0, "Field", Field);
            builder.AddAttribute(0, "State", State);
            builder.AddAttribute(0, "ModelValueChanged", ModelValueChanged);
            builder.CloseComponent();
        };
        <div>
            @renderFragment
        </div>
    }

</div>

@code
{
    [Parameter]
    public IDataForm Form { get; set; }

    [Parameter]
    public DataField Field { get; set; }

    [Parameter]
    public FieldState State { get; set; }

    [Parameter]
    public bool IsEditing { get; set; }

    [Parameter]
    public EventCallback<ValueChangedArgs> ModelValueChanged { get; set; }

    private bool IsEditingControl()
    {
        if (IsEditing)//  && ((Field.ReadOnly == null || Field.ReadOnly == false) && Field.PrimaryKey && State.IsNew))
        {
            if (Field.PrimaryKey && State.IsNew && Field.PrimaryKeyGeneratedType != PrimaryKeyGeneratedTypes.Never)
            {
                State.IsEditing = false;
            }
            else
            if (Field.PrimaryKey && !State.IsNew)
            {
                State.IsEditing = false;
            }
            else
            if (Field.ReadOnly == true)
            {
                State.IsEditing = false;
            }
            else
            if (!Field.PrimaryKey && Field.Filter)
            {
                State.IsEditing = false;
            }
            else
            {
                State.IsEditing = true;
            }

            return State.IsEditing;
        }

        State.IsEditing = false;
        return State.IsEditing;
    }
}